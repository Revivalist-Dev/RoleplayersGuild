-- =================================================================================================
--
--  Role-Players Guild Database Creation Script - PostgreSQL Version
--  Last Updated: 2025-07-28
--
--  This script will completely drop and re-create the 'rpgdb-live' database.
--  Executing this script will result in the loss of all existing data.
--
-- =================================================================================================


-- ====================================================================
--  SCHEMA SETUP: Drop and create the database
-- ====================================================================
-- Note: Run these first two commands while connected to a different database (e.g., 'postgres').
-- You may need to terminate active connections if users are connected to 'rpgdb-live'.
DROP DATABASE IF EXISTS "rpgdb-live";
CREATE DATABASE "rpgdb-live";

-- After creating the database, connect to it before running the rest of the script.
-- In psql, you would use: \c "rpgdb-live"
-- The rest of the script assumes you are connected to the "rpgdb-live" database.

-- Enable the pgcrypto extension for UUID generation
CREATE EXTENSION IF NOT EXISTS "pgcrypto";


-- ====================================================================
--  SECTION 1: TABLE CREATION
-- ====================================================================

-- Core User & Account Tables
CREATE TABLE "Users"(
    "UserId" SERIAL PRIMARY KEY,
    "EmailAddress" VARCHAR(255) NULL,
    "Password" VARCHAR(256) NOT NULL,
    "Username" VARCHAR(255) NULL,
    "AboutMe" TEXT NULL,
    "LastAction" TIMESTAMP NULL,
    "ShowWhenOnline" BOOLEAN NOT NULL DEFAULT TRUE,
    "ShowMatureContent" BOOLEAN NOT NULL DEFAULT TRUE,
    "ReceivesThreadNotifications" BOOLEAN NOT NULL DEFAULT TRUE,
    "ReceivesImageCommentNotifications" BOOLEAN NOT NULL DEFAULT TRUE,
    "ReceivesWritingCommentNotifications" BOOLEAN NOT NULL DEFAULT TRUE,
    "ReceivesDevEmails" BOOLEAN NOT NULL DEFAULT TRUE,
    "ReceivesErrorFixEmails" BOOLEAN NOT NULL DEFAULT TRUE,
    "ReceivesGeneralEmailBlasts" BOOLEAN NOT NULL DEFAULT TRUE,
    "IsAdmin" BOOLEAN NOT NULL DEFAULT FALSE,
    "ReceiveAdminAnnouncements" BOOLEAN NOT NULL DEFAULT TRUE,
    "LastHalloweenBadge" TIMESTAMP NULL,
    "LastChristmasBadge" TIMESTAMP NULL,
    "CurrentSendAsCharacter" INT NULL, -- FK added later
    "MembershipTypeId" INT NOT NULL DEFAULT 0,
    "ShowWriterLinkOnCharacters" BOOLEAN NOT NULL DEFAULT TRUE,
    "LastLogin" TIMESTAMP NULL,
    "UserTypeId" INT NOT NULL DEFAULT 1,
    "HideStream" BOOLEAN NOT NULL DEFAULT FALSE,
    "UseDarkTheme" BOOLEAN NOT NULL DEFAULT FALSE,
    "MemberJoinedDate" TIMESTAMP NOT NULL DEFAULT NOW(),
    "ReferredBy" INT NULL,
    "Timezone" VARCHAR(100) NULL
);

CREATE TABLE "Login_Attempts"(
    "LoginAttemptID" SERIAL PRIMARY KEY,
    "IPAddress" VARCHAR(45) NOT NULL,
    "AttemptWasSuccessful" BOOLEAN NOT NULL,
    "AttemptTimeStamp" TIMESTAMP NOT NULL DEFAULT NOW(),
    "AttemptedUsername" VARCHAR(255) NULL,
    "AttemptedPassword" VARCHAR(255) NULL
);

CREATE TABLE "Recovery_Attempts"(
    "RecoveryAttemptID" SERIAL PRIMARY KEY,
    "IPAddress" VARCHAR(45) NULL,
    "AttemptTimeStamp" TIMESTAMP NOT NULL DEFAULT NOW(),
    "AttemptedEmail" VARCHAR(255) NULL,
    "UserId" INT NULL,
    "RecoveryKey" UUID NOT NULL DEFAULT gen_random_uuid(),
    "RecoveryKeyUsed" BOOLEAN NOT NULL DEFAULT FALSE
);

CREATE TABLE "Memberships"(
    "MembershipID" SERIAL PRIMARY KEY,
    "UserId" INT NOT NULL,
    "MembershipTypeId" INT NOT NULL,
    "StartDate" TIMESTAMP NOT NULL,
    "EndDate" TIMESTAMP NULL,
    "IsActive" BOOLEAN NOT NULL
);

CREATE TABLE "QuickLinks"(
    "QuickLinkId" SERIAL PRIMARY KEY,
    "UserId" INT NOT NULL,
    "LinkName" VARCHAR(100) NOT NULL,
    "LinkAddress" VARCHAR(255) NOT NULL,
    "OrderNumber" INT NOT NULL
);

CREATE TABLE "User_Blocking"(
    "UserBlockID" SERIAL PRIMARY KEY,
    "UserBlocked" INT NOT NULL,
    "UserBlockedBy" INT NOT NULL
);

CREATE TABLE "User_Notes"(
    "UserNoteID" SERIAL PRIMARY KEY,
    "UserId" INT NOT NULL,
    "CreatedByUserId" INT NOT NULL,
    "NoteContent" TEXT NOT NULL,
    "NoteTimestamp" TIMESTAMP NOT NULL DEFAULT NOW()
);

CREATE TABLE "User_Badges"(
    "UserBadgeId" SERIAL PRIMARY KEY,
    "UserId" INT NOT NULL,
    "BadgeID" INT NOT NULL,
    "AssignedToCharacterId" INT NOT NULL DEFAULT 0,
    "DateReceived" TIMESTAMP NOT NULL DEFAULT NOW(),
    "ReasonEarned" VARCHAR(255) NULL,
    "IsDisplayed" BOOLEAN NOT NULL DEFAULT TRUE
);

CREATE TABLE "Characters"(
    "CharacterId" SERIAL PRIMARY KEY,
    "UserId" INT NOT NULL,
    "CharacterDisplayName" VARCHAR(255) NULL,
    "CharacterFirstName" VARCHAR(255) NULL,
    "CharacterMiddleName" VARCHAR(255) NULL,
    "CharacterLastName" VARCHAR(255) NULL,
    "IsActive" BOOLEAN NULL,
    "IsApproved" BOOLEAN NULL,
    "ProfileCSS" TEXT NULL,
    "LastUpdated" TIMESTAMP NULL,
    "DateSubmitted" TIMESTAMP NULL,
    "SubmittedBy" INT NULL,
    "IsPrivate" BOOLEAN NOT NULL DEFAULT FALSE,
    "ProfileHTML" TEXT NULL,
    "LFRPStatus" INT NOT NULL DEFAULT 1,
    "DisableLinkify" BOOLEAN NOT NULL DEFAULT FALSE,
    "CharacterBio" TEXT NULL,
    "CharacterGender" INT NULL,
    "LiteracyLevel" INT NULL,
    "PostLengthMax" INT NULL,
    "PostLengthMin" INT NULL,
    "MatureContent" BOOLEAN NOT NULL DEFAULT FALSE,
    "SexualOrientation" INT NULL,
    "EroticaPreferences" INT NULL,
    "CharacterSourceID" INT NULL,
    "CharacterStatusID" INT NOT NULL DEFAULT 1,
    "TypeId" INT NOT NULL DEFAULT 1,
    "CustomProfileEnabled" BOOLEAN NOT NULL DEFAULT FALSE,
    "UniverseId" INT NULL,
    "RecentEvents" TEXT NULL,
    "OtherInfo" TEXT NULL,
    "ViewCount" INT NOT NULL DEFAULT 0,
    "CardImageURL" VARCHAR(255) NULL
);

CREATE TABLE "Character_Images"(
    "CharacterImageID" SERIAL PRIMARY KEY,
    "CharacterId" INT NOT NULL,
    "CharacterImageURL" VARCHAR(255) NOT NULL,
    "IsPrimary" BOOLEAN NOT NULL DEFAULT FALSE,
    "IsMature" BOOLEAN NOT NULL DEFAULT FALSE,
    "ImageCaption" VARCHAR(500) NULL
);

CREATE TABLE "Character_Avatars"(
    "AvatarID" SERIAL PRIMARY KEY,
    "CharacterId" INT NOT NULL,
    "AvatarImageUrl" VARCHAR(255) NOT NULL,
    "DateCreated" TIMESTAMP NOT NULL DEFAULT NOW(),
    CONSTRAINT "UQ_Character_Avatars_CharacterId" UNIQUE ("CharacterId")
);

CREATE TABLE "Character_Bookmarks"(
    "BookmarkID" SERIAL PRIMARY KEY,
    "CharacterId" INT NOT NULL,
    "UserId" INT NOT NULL
);

CREATE TABLE "Character_Inlines"(
    "InlineID" SERIAL PRIMARY KEY,
    "CharacterId" INT NOT NULL,
    "InlineName" VARCHAR(100) NOT NULL,
    "InlineImageURL" VARCHAR(255) NOT NULL,
    "DateCreated" TIMESTAMP NOT NULL DEFAULT NOW()
);

CREATE TABLE "Character_Image_Comments"(
    "ImageCommentID" SERIAL PRIMARY KEY,
    "ImageID" INT NOT NULL,
    "CharacterId" INT NOT NULL,
    "CommentText" TEXT NOT NULL,
    "CommentTimeStamp" TIMESTAMP NOT NULL DEFAULT NOW(),
    "IsRead" BOOLEAN NOT NULL DEFAULT FALSE
);

CREATE TABLE "Articles"(
    "ArticleId" SERIAL PRIMARY KEY,
    "OwnerUserId" INT NOT NULL,
    "CategoryId" INT NULL,
    "ArticleTitle" VARCHAR(255) NULL,
    "ArticleContent" TEXT NULL,
    "DateSubmitted" TIMESTAMP NOT NULL DEFAULT NOW(),
    "CreatedDateTime" TIMESTAMP NOT NULL DEFAULT NOW(),
    "IsPublished" BOOLEAN NOT NULL DEFAULT FALSE,
    "ContentRatingId" INT NULL,
    "IsPrivate" BOOLEAN NOT NULL DEFAULT FALSE,
    "DisableLinkify" BOOLEAN NOT NULL DEFAULT FALSE,
    "UniverseId" INT NULL
);

CREATE TABLE "Stories"(
    "StoryId" SERIAL PRIMARY KEY,
    "UserId" INT NOT NULL,
    "StoryTitle" VARCHAR(255) NULL,
    "StoryContent" TEXT NULL,
    "StoryDescription" TEXT NULL,
    "DateCreated" TIMESTAMP NOT NULL DEFAULT NOW(),
    "LastUpdated" TIMESTAMP NULL,
    "ContentRatingId" INT NULL,
    "UniverseId" INT NULL,
    "IsPrivate" BOOLEAN NOT NULL DEFAULT FALSE
);

CREATE TABLE "Story_Posts"(
    "StoryPostID" SERIAL PRIMARY KEY,
    "StoryId" INT NOT NULL,
    "CharacterId" INT NOT NULL,
    "PostContent" TEXT NULL,
    "PostDateTime" TIMESTAMP NOT NULL DEFAULT NOW()
);

CREATE TABLE "Story_Views"(
    "ViewID" SERIAL PRIMARY KEY,
    "StoryId" INT NOT NULL,
    "UserId" INT NOT NULL,
    "ViewDate" TIMESTAMP NOT NULL
);

CREATE TABLE "Universes"(
    "UniverseId" SERIAL PRIMARY KEY,
    "UniverseName" VARCHAR(255) NULL,
    "UniverseDescription" TEXT NULL,
    "UniverseOwnerID" INT NOT NULL,
    "SubmittedByID" INT NULL,
    "CreatedDate" TIMESTAMP NULL,
    "ContentRatingId" INT NULL,
    "SourceTypeId" INT NULL,
    "StatusID" INT NULL,
    "RequiresApprovalOnJoin" BOOLEAN NOT NULL DEFAULT FALSE,
    "DisableLinkify" BOOLEAN NOT NULL DEFAULT FALSE
);

CREATE TABLE "Chat_Rooms"(
    "ChatRoomId" SERIAL PRIMARY KEY,
    "SubmittedByUserId" INT NULL,
    "ChatRoomName" VARCHAR(255) NULL,
    "ContentRatingId" INT NULL,
    "UniverseId" INT NULL,
    "ChatRoomStatusId" INT NOT NULL DEFAULT 1,
    "ChatRoomDescription" TEXT NULL
);

CREATE TABLE "Chat_Room_Posts"(
    "ChatPostID" SERIAL PRIMARY KEY,
    "ChatRoomId" INT NOT NULL,
    "UserId" INT NOT NULL,
    "PostContent" TEXT NULL,
    "PostDateTime" TIMESTAMP NOT NULL DEFAULT NOW(),
    "CharacterId" INT NOT NULL,
    "CharacterThumbnail" TEXT NULL,
    "CharacterNameClass" TEXT NULL,
    "CharacterDisplayName" TEXT NULL
);

CREATE TABLE "Chat_Room_Invites"(
    "InviteID" SERIAL PRIMARY KEY,
    "ChatRoomId" INT NOT NULL,
    "UserId" INT NOT NULL
);

CREATE TABLE "Chat_Room_Locks"(
    "ChatRoomLockID" SERIAL PRIMARY KEY,
    "ChatRoomId" INT NOT NULL,
    "UserId" INT NOT NULL
);

CREATE TABLE "Content_Ratings"(
    "ContentRatingId" SERIAL PRIMARY KEY,
    "ContentRatingDescription" VARCHAR(255) NULL,
    "ContentRating" VARCHAR(50) NULL
);

CREATE TABLE "Threads"(
    "ThreadID" SERIAL PRIMARY KEY,
    "ThreadTitle" VARCHAR(255) NOT NULL,
    "LastMessage" TIMESTAMP NULL,
    "CreatedBy" INT NULL,
    "ForumID" INT NULL,
    "DateCreated" TIMESTAMP NOT NULL DEFAULT NOW()
);

CREATE TABLE "Thread_Messages"(
    "ThreadMessageID" SERIAL PRIMARY KEY,
    "ThreadID" INT NOT NULL,
    "CreatorID" INT NOT NULL,
    "MessageContent" TEXT NOT NULL,
    "TimeStamp" TIMESTAMP NOT NULL DEFAULT NOW(),
    "MessageLastEditDate" TIMESTAMP NULL,
    "LastEditedBy" INT NULL
);

CREATE TABLE "Thread_Users"(
    "ThreadUserId" SERIAL PRIMARY KEY,
    "UserId" INT NOT NULL,
    "ThreadID" INT NOT NULL,
    "ReadStatusID" INT NOT NULL DEFAULT 2,
    "CharacterId" INT NOT NULL,
    "PermissionID" INT NOT NULL DEFAULT 0
);

CREATE TABLE "ToDo_Items"(
    "ItemId" SERIAL PRIMARY KEY,
    "ItemName" VARCHAR(255) NULL,
    "ItemDescription" TEXT NULL,
    "CreatedDateTime" TIMESTAMP NOT NULL DEFAULT NOW(),
    "CreatedByUserId" INT NOT NULL,
    "TypeId" INT NOT NULL,
    "AssignedToUserId" INT NULL,
    "AssignedToCharacterId" INT NULL,
    "StatusID" INT NOT NULL DEFAULT 1,
    "CharacterAssignable" BOOLEAN NOT NULL DEFAULT FALSE
);

CREATE TABLE "ToDo_Item_Votes"(
    "ToDoItemVoteID" SERIAL PRIMARY KEY,
    "ToDoItemId" INT NOT NULL,
    "UserId" INT NOT NULL
);

CREATE TABLE "Character_Genres"(
    "CharacterGenreId" SERIAL PRIMARY KEY,
    "CharacterId" INT NOT NULL,
    "GenreId" INT NOT NULL
);

CREATE TABLE "Article_Genres"(
    "ArticleGenreId" SERIAL PRIMARY KEY,
    "ArticleId" INT NOT NULL,
    "GenreId" INT NOT NULL
);

CREATE TABLE "Story_Genres"(
    "StoryGenreId" SERIAL PRIMARY KEY,
    "StoryId" INT NOT NULL,
    "GenreId" INT NOT NULL
);

CREATE TABLE "Universe_Genres"(
    "UniverseGenreId" SERIAL PRIMARY KEY,
    "UniverseId" INT NOT NULL,
    "GenreId" INT NOT NULL
);

CREATE TABLE "Character_Universes"(
    "CharacterUniverseId" SERIAL PRIMARY KEY,
    "CharacterId" INT NOT NULL,
    "UniverseId" INT NOT NULL
);

CREATE TABLE "Universe_Admins"(
    "AdminID" SERIAL PRIMARY KEY,
    "UniverseId" INT NOT NULL,
    "UserId" INT NOT NULL
);

CREATE TABLE "Universe_Bans"(
    "BanID" SERIAL PRIMARY KEY,
    "UniverseId" INT NOT NULL,
    "UserId" INT NOT NULL
);

CREATE TABLE "Universe_Pending_Invites"(
    "InviteID" SERIAL PRIMARY KEY,
    "UniverseId" INT NOT NULL,
    "UserId" INT NOT NULL
);

CREATE TABLE "General_Settings"(
    "SettingID" SERIAL PRIMARY KEY,
    "CurrentFundingAmount" NUMERIC(18, 2) NOT NULL DEFAULT 0.00,
    "StreamSettingDescription" TEXT NOT NULL DEFAULT '',
    "RulesPageContent" TEXT NULL,
    "PrivacyPolicyContent" TEXT NULL
);

CREATE TABLE "AdTypes"(
    "AdTypeId" SERIAL PRIMARY KEY,
    "AdTypeName" VARCHAR(50) NOT NULL
);

CREATE TABLE "Ads"(
    "AdID" SERIAL PRIMARY KEY,
    "AdTypeId" INT NOT NULL,
    "AdName" VARCHAR(255) NOT NULL,
    "AdImageURL" VARCHAR(255) NOT NULL,
    "AdLink" VARCHAR(255) NOT NULL,
    "IsActive" BOOLEAN NOT NULL DEFAULT TRUE
);

CREATE TABLE "Badges"(
    "BadgeID" SERIAL PRIMARY KEY,
    "BadgeName" VARCHAR(100) NOT NULL,
    "BadgeDescription" TEXT NULL,
    "BadgeImageUrl" VARCHAR(255) NULL,
    "CharacterAssignable" BOOLEAN NOT NULL DEFAULT FALSE,
    "HowToGetBadge" TEXT NULL,
    "CharacterNameClass" VARCHAR(50) NULL,
    "SortOrder" INT NOT NULL DEFAULT 0
);

CREATE TABLE "MembershipTypes"(
    "MembershipTypeId" SERIAL PRIMARY KEY,
    "TypeName" VARCHAR(50) NOT NULL,
    "Description" TEXT NULL
);

CREATE TABLE "Character_Genders"(
    "GenderID" SERIAL PRIMARY KEY,
    "Gender" VARCHAR(50) NOT NULL
);

CREATE TABLE "Character_SexualOrientations"(
    "SexualOrientationID" SERIAL PRIMARY KEY,
    "SexualOrientation" VARCHAR(50) NOT NULL
);

CREATE TABLE "Genres"(
    "GenreId" SERIAL PRIMARY KEY,
    "GenreName" VARCHAR(50) NOT NULL
);

CREATE TABLE "Character_PostLengths"(
    "PostLengthID" SERIAL PRIMARY KEY,
    "PostLength" VARCHAR(50) NOT NULL
);

CREATE TABLE "Character_LiteracyLevels"(
    "LiteracyLevelID" SERIAL PRIMARY KEY,
    "LiteracyLevel" VARCHAR(50) NOT NULL
);

CREATE TABLE "Character_LFRPStatuses"(
    "LFRPStatusID" SERIAL PRIMARY KEY,
    "LFRPStatus" VARCHAR(50) NOT NULL
);

CREATE TABLE "Character_EroticaPreferences"(
    "EroticaPreferenceID" SERIAL PRIMARY KEY,
    "EroticaPreference" VARCHAR(50) NOT NULL
);

CREATE TABLE "Character_Statuses"(
    "CharacterStatusID" SERIAL PRIMARY KEY,
    "StatusName" VARCHAR(50) NOT NULL
);

CREATE TABLE "Character_Type"(
    "TypeId" SERIAL PRIMARY KEY,
    "TypeName" VARCHAR(50) NOT NULL
);

CREATE TABLE "Sources"(
    "SourceID" SERIAL PRIMARY KEY,
    "Source" VARCHAR(50) NOT NULL
);

CREATE TABLE "Chat_Room_Statuses"(
    "ChatRoomStatusId" SERIAL PRIMARY KEY,
    "ChatRoomStatusName" VARCHAR(50) NOT NULL
);

CREATE TABLE "Categories"(
    "CategoryId" SERIAL PRIMARY KEY,
    "CategoryName" VARCHAR(100) NOT NULL
);

CREATE TABLE "ToDo_Item_Statuses"(
    "StatusID" SERIAL PRIMARY KEY,
    "StatusName" VARCHAR(50) NOT NULL
);

CREATE TABLE "ToDo_Item_Types"(
    "TypeId" SERIAL PRIMARY KEY,
    "TypeName" VARCHAR(50) NOT NULL
);

-- Proposal Tables
CREATE TABLE "Proposal_Statuses"(
    "StatusID" SERIAL PRIMARY KEY,
    "StatusName" VARCHAR(50) NOT NULL
);

CREATE TABLE "Proposals"(
    "ProposalID" SERIAL PRIMARY KEY,
    "UserId" INT NOT NULL,
    "Title" VARCHAR(255) NOT NULL,
    "Description" TEXT NOT NULL,
    "ContentRatingId" INT NOT NULL,
    "StatusID" INT NOT NULL DEFAULT 1,
    "CreatedDateTime" TIMESTAMP NOT NULL DEFAULT NOW(),
    "LastUpdated" TIMESTAMP NOT NULL DEFAULT NOW(),
    "UniverseId" INT NULL,
    "IsPrivate" BOOLEAN NOT NULL DEFAULT FALSE,
    "DisableLinkify" BOOLEAN NOT NULL DEFAULT FALSE
);

CREATE TABLE "Proposal_Genres"(
    "ProposalGenreId" SERIAL PRIMARY KEY,
    "ProposalID" INT NOT NULL,
    "GenreId" INT NOT NULL
);

CREATE TABLE "Proposal_Responses"(
    "ResponseID" SERIAL PRIMARY KEY,
    "ProposalID" INT NOT NULL,
    "UserId" INT NOT NULL,
    "CharacterId" INT NOT NULL,
    "Message" TEXT NULL,
    "ResponseDateTime" TIMESTAMP NOT NULL DEFAULT NOW(),
    "IsAccepted" BOOLEAN NULL
);


-- ====================================================================
--  SECTION 2: SEED DATA
-- ====================================================================

-- Static Lookup Data
INSERT INTO "Badges" ("BadgeID", "CharacterNameClass", "SortOrder", "CharacterAssignable", "BadgeName", "BadgeDescription", "BadgeImageUrl") VALUES
(1, 'DonorLink',1, TRUE,'Donor', 'Awarded for making a donation.', '/Images/Badges/Donor.png'),
(2, 'HighDonorLink',2, TRUE,'High Donor', 'Awarded for significant donations.', '/Images/Badges/HighDonor.png'),
(3, 'StaffLink',0, TRUE,'Staff Member', 'Awarded for being a staff member.', '/Images/Badges/StaffMember.png'),
(4, 'MassReferrerLink', 12, TRUE, 'Mass Friend Referral', 'Awarded for referring multiple friends.', '/Images/Badges/MassFriendReferral.png'),
(5, 'MasterCreatorLink', 10, TRUE, 'Master Creator', 'Awarded for creating various content types.', '/Images/Badges/MasterCreatorBadge.png'),
(8, 'CreatorLink',9, TRUE,'Chat Room Creator', 'Awarded for creating a chat room.', '/Images/Badges/ChatRoomCreator.png'),
(9, 'ReferrerLink',11, TRUE,'Friend Referral', 'Awarded for referring a friend.', '/Images/Badges/FriendReferral.png'),
(10,'PaidMemberLink',13, TRUE, 'Bronze Member', 'Achieved Bronze Membership status.', '/Images/Badges/BronzeMember.png'),
(11,'PaidMemberLink',14, TRUE, 'Silver Member', 'Achieved Silver Membership status.', '/Images/Badges/SilverMember.png'),
(12,'PaidMemberLink',15, TRUE, 'Gold Member', 'Achieved Gold Membership status.', '/Images/Badges/GoldMember.png'),
(13,'CreatorLink',8, TRUE, 'Universe Creator', 'Awarded for creating a universe.', '/Images/Badges/UniverseCreator.png'),
(15,'PaidMemberLink',16, TRUE, 'Platinum Member', 'Achieved Platinum Membership status.', '/Images/Badges/PlatinumMember.png'),
(16,'UnlimitedImagesLink',0, TRUE, 'Unlimited Images', 'Awarded for unlimited image uploads.', '/Images/Badges/UnlimitedImages.png'),
(25,'YearLink',17, TRUE, 'One Year Member', 'Awarded for being a member for 1 year.', '/Images/Badges/OneYearBadge.png'),
(27,'CreatorLink',5, TRUE, 'Character Creator', 'Awarded for creating a character.', '/Images/Badges/CharacterCreated.png'),
(28,'CreatorLink',7, TRUE, 'Article Creator', 'Awarded for writing an article.', '/Images/Badges/ArticleCreator.png'),
(32,'TwoYearLink',18, TRUE, 'Two Year Member', 'Awarded for being a member for 2 years.', '/Images/Badges/TwoYearBadge.png'),
(33,'ThreeYearLink',19, TRUE, 'Three Year Member', 'Awarded for being a member for 3 years.', '/Images/Badges/ThreeYearBadge.png'),
(34,'CreatorLink',6, TRUE, 'Story Creator', 'Awarded for creating a story.', '/Images/Badges/StoryCreator.png'),
(35,'TenYearLink',20, TRUE, 'Ten Year Member', 'Awarded for being a member for 10 years.', '/Images/Badges/TenYearBadge.png'),
(69,'VillaniteLink',1000, TRUE, 'Original Developer', 'Reserved badge for the original developer of RPG.', '/Images/Badges/VillaniteBadge.png');
SELECT setval(pg_get_serial_sequence('"Badges"', 'BadgeID'), (SELECT MAX("BadgeID") FROM "Badges"));

INSERT INTO "Categories" ("CategoryName") VALUES ('Default');

INSERT INTO "MembershipTypes" ("MembershipTypeId", "TypeName", "Description") VALUES
(0, 'Free', 'Standard free membership.'),(1, 'Bronze', 'Bronze paid membership.'),(2, 'Silver', 'Silver paid membership.'),(3, 'Gold', 'Gold paid membership.'),(4, 'Platinum', 'Platinum paid membership.');
SELECT setval(pg_get_serial_sequence('"MembershipTypes"', 'MembershipTypeId'), (SELECT MAX("MembershipTypeId") FROM "MembershipTypes"));

INSERT INTO "Character_Genders" ("Gender") VALUES ('Male'), ('Female'), ('Non-binary'), ('Agender'), ('Genderfluid'), ('Other'), ('Not Specified');
INSERT INTO "Character_SexualOrientations" ("SexualOrientation") VALUES ('Heterosexual'), ('Homosexual'), ('Bisexual'), ('Pansexual'), ('Asexual'), ('Demisexual'), ('Other'), ('Not Specified');
INSERT INTO "Genres" ("GenreName") VALUES ('Fantasy'), ('Sci-Fi'), ('Horror'), ('Modern'), ('Historical'), ('Fandom'), ('Post-Apocalyptic'), ('Steampunk'), ('Cyberpunk'), ('Slice of Life'), ('Mystery'), ('Adventure');
INSERT INTO "Character_PostLengths" ("PostLength") VALUES ('One-Line'), ('Semi-Paragraph'), ('Paragraph'), ('Multi-Paragraph'), ('Novella');
INSERT INTO "Character_LiteracyLevels" ("LiteracyLevel") VALUES ('Beginner'), ('Intermediate'), ('Advanced'), ('Literate'), ('Verbose'), ('Flexible');
INSERT INTO "Character_LFRPStatuses" ("LFRPStatus") VALUES ('Discussions or Starters'), ('Spontaneous Starters Only'), ('Discussions Only'), ('Not Looking For Roleplay');
INSERT INTO "Character_EroticaPreferences" ("EroticaPreference") VALUES ('None'), ('Fade to Black'), ('Yes'), ('Ask Me First');
INSERT INTO "Character_Statuses" ("StatusName") VALUES ('Active'), ('Under Review'), ('Inactive'), ('Banned');
INSERT INTO "Sources" ("Source") VALUES ('Original'), ('Fan-fiction'), ('Game-based'), ('Book-based'), ('Movie/TV-based');

INSERT INTO "Content_Ratings" ("ContentRating", "ContentRatingDescription") VALUES
('SFW', 'Content is suitable for a baseline adult audience. May include mild profanity, suggestive themes, and non-graphic, fantasy-style violence. This is the default rating for general storytelling.'),
('NSFW', 'Intended for mature players. Expect graphic violence, strong language, and potentially disturbing or sexual themes that are not explicitly detailed.'),
('XXX', 'This content is explicitly graphic. It contains detailed depictions of sexual acts, extreme violence, or other material considered pornographic or obscene.');

INSERT INTO "Chat_Room_Statuses" ("ChatRoomStatusName") VALUES ('Active'), ('Archived'), ('Under Review');
INSERT INTO "ToDo_Item_Statuses" ("StatusName") VALUES ('Pending'), ('In Progress'), ('Completed'), ('On Hold'), ('Rejected');
INSERT INTO "ToDo_Item_Types" ("TypeName") VALUES ('Bug Fix'), ('New Feature'), ('Improvement'), ('Task');

INSERT INTO "Character_Type" ("TypeId", "TypeName") VALUES (1, 'Standard'), (2, 'NPC'), (3, 'Staff');
SELECT setval(pg_get_serial_sequence('"Character_Type"', 'TypeId'), (SELECT MAX("TypeId") FROM "Character_Type"));

INSERT INTO "Proposal_Statuses" ("StatusName") VALUES ('Open'), ('Closed');

DO $$
BEGIN
   IF NOT EXISTS (SELECT 1 FROM "General_Settings") THEN
      INSERT INTO "General_Settings" ("CurrentFundingAmount", "StreamSettingDescription", "RulesPageContent", "PrivacyPolicyContent")
      VALUES (50.00, 'Default stream setting description.', '<h1>Site Rules</h1><p>The rules have not been set yet.</p>', '<h1>Privacy Policy</h1><p>The privacy policy has not been set yet.</p>');
   END IF;
END $$;

-- Core Site User, Universe, and Character Data
INSERT INTO "Users" ("UserId", "EmailAddress", "Password", "Username", "IsAdmin", "UserTypeId") VALUES
    (1, 'system@rpg.com', 'password', 'System', TRUE, 3),
    (2, 'admin@rpg.com', 'password', 'Admin', TRUE, 3),
    (3, 'user@rpg.com', 'password', 'RegularUser', FALSE, 1),
    (12, 'dev@rpg.com', 'password', 'DevUser', FALSE, 1),
    (100, 'test.user@rpg.com', 'password', 'TestUser', FALSE, 1),
    (101, 'test.staff@rpg.com', 'password', 'TestStaff', FALSE, 2),
    (102, 'test.admin@rpg.com', 'password', 'TestAdmin', TRUE, 3),
    (103, 'test.superadmin@rpg.com', 'password', 'TestSuperAdmin', TRUE, 4);
SELECT setval(pg_get_serial_sequence('"Users"', 'UserId'), (SELECT MAX("UserId") FROM "Users"));

INSERT INTO "Characters" ("CharacterId", "UserId", "CharacterDisplayName", "IsActive", "IsApproved", "CharacterStatusID", "LFRPStatus", "CharacterGender", "LiteracyLevel", "PostLengthMin", "PostLengthMax", "SexualOrientation", "EroticaPreferences", "CharacterSourceID") VALUES
    (1, 1, 'System', TRUE, TRUE, 1, 2, 7, 6, 1, 5, 8, 1, 1),
    (2, 2, 'Admin', TRUE, TRUE, 1, 2, 7, 6, 1, 5, 8, 1, 1),
    (3, 3, 'RegularUser', TRUE, TRUE, 1, 2, 7, 6, 1, 5, 8, 1, 1),
    (4, 12, 'DevUser', TRUE, TRUE, 1, 2, 7, 6, 1, 5, 8, 1, 1),
    (100, 100, 'TestUserChar', TRUE, TRUE, 1, 2, 7, 6, 1, 5, 8, 1, 1),
    (101, 101, 'TestStaffChar', TRUE, TRUE, 1, 2, 7, 6, 1, 5, 8, 1, 1),
    (102, 102, 'TestAdminChar', TRUE, TRUE, 1, 2, 7, 6, 1, 5, 8, 1, 1),
    (103, 103, 'TestSuperAdminChar', TRUE, TRUE, 1, 2, 7, 6, 1, 5, 8, 1, 1);
SELECT setval(pg_get_serial_sequence('"Characters"', 'CharacterId'), (SELECT MAX("CharacterId") FROM "Characters"));

-- Update CurrentSendAsCharacter for all users
UPDATE "Users" SET "CurrentSendAsCharacter" = 1 WHERE "UserId" = 1;
UPDATE "Users" SET "CurrentSendAsCharacter" = 2 WHERE "UserId" = 2;
UPDATE "Users" SET "CurrentSendAsCharacter" = 3 WHERE "UserId" = 3;
UPDATE "Users" SET "CurrentSendAsCharacter" = 4 WHERE "UserId" = 12;
UPDATE "Users" SET "CurrentSendAsCharacter" = 100 WHERE "UserId" = 100;
UPDATE "Users" SET "CurrentSendAsCharacter" = 101 WHERE "UserId" = 101;
UPDATE "Users" SET "CurrentSendAsCharacter" = 102 WHERE "UserId" = 102;
UPDATE "Users" SET "CurrentSendAsCharacter" = 103 WHERE "UserId" = 103;

-- This assumes Character_Images might exist and some URLs need prefixing.
UPDATE "Character_Images"
SET "CharacterImageURL" = 'fullimg_' || "CharacterImageURL"
WHERE "CharacterImageURL" NOT LIKE 'fullimg_%';

UPDATE "Characters" SET "LFRPStatus" = 1 WHERE "LFRPStatus" = 2;
UPDATE "Character_LFRPStatuses" SET "LFRPStatus" = 'Discussions or Starters' WHERE "LFRPStatusID" = 1;
UPDATE "Character_LFRPStatuses" SET "LFRPStatus" = 'Spontaneous Starters Only' WHERE "LFRPStatusID" = 2;
UPDATE "Character_LFRPStatuses" SET "LFRPStatus" = 'Discussions Only' WHERE "LFRPStatusID" = 3;
UPDATE "Character_LFRPStatuses" SET "LFRPStatus" = 'Not Looking For Roleplay' WHERE "LFRPStatusID" = 4;


-- ====================================================================
--  SECTION 3: FOREIGN KEY CONSTRAINTS
-- ====================================================================

ALTER TABLE "Users" ALTER COLUMN "CurrentSendAsCharacter" SET NOT NULL;
ALTER TABLE "Users" ALTER COLUMN "CurrentSendAsCharacter" SET DEFAULT 1;
ALTER TABLE "Users" ADD CONSTRAINT "FK_Users_Characters_CurrentSendAs" FOREIGN KEY("CurrentSendAsCharacter") REFERENCES "Characters" ("CharacterId");

ALTER TABLE "Ads" ADD CONSTRAINT "FK_Ads_AdTypes" FOREIGN KEY("AdTypeId") REFERENCES "AdTypes" ("AdTypeId");
ALTER TABLE "Articles" ADD CONSTRAINT "FK_Articles_Categories" FOREIGN KEY("CategoryId") REFERENCES "Categories" ("CategoryId");
ALTER TABLE "Articles" ADD CONSTRAINT "FK_Articles_Users" FOREIGN KEY("OwnerUserId") REFERENCES "Users" ("UserId");
ALTER TABLE "Articles" ADD CONSTRAINT "FK_Articles_Content_Ratings" FOREIGN KEY("ContentRatingId") REFERENCES "Content_Ratings" ("ContentRatingId");
ALTER TABLE "Articles" ADD CONSTRAINT "FK_Articles_Universes" FOREIGN KEY("UniverseId") REFERENCES "Universes" ("UniverseId");
ALTER TABLE "Article_Genres" ADD CONSTRAINT "FK_Article_Genres_Articles" FOREIGN KEY("ArticleId") REFERENCES "Articles" ("ArticleId") ON DELETE CASCADE;
ALTER TABLE "Article_Genres" ADD CONSTRAINT "FK_Article_Genres_Genres" FOREIGN KEY("GenreId") REFERENCES "Genres" ("GenreId") ON DELETE CASCADE;

ALTER TABLE "Characters" ADD CONSTRAINT "FK_Characters_Users" FOREIGN KEY("UserId") REFERENCES "Users" ("UserId");
ALTER TABLE "Characters" ADD CONSTRAINT "FK_Characters_Character_Genders" FOREIGN KEY("CharacterGender") REFERENCES "Character_Genders" ("GenderID");
ALTER TABLE "Characters" ADD CONSTRAINT "FK_Characters_Character_LiteracyLevels" FOREIGN KEY("LiteracyLevel") REFERENCES "Character_LiteracyLevels" ("LiteracyLevelID");
ALTER TABLE "Characters" ADD CONSTRAINT "FK_Characters_Character_PostLengths_Max" FOREIGN KEY("PostLengthMax") REFERENCES "Character_PostLengths" ("PostLengthID");
ALTER TABLE "Characters" ADD CONSTRAINT "FK_Characters_Character_PostLengths_Min" FOREIGN KEY("PostLengthMin") REFERENCES "Character_PostLengths" ("PostLengthID");
ALTER TABLE "Characters" ADD CONSTRAINT "FK_Characters_Character_SexualOrientations" FOREIGN KEY("SexualOrientation") REFERENCES "Character_SexualOrientations" ("SexualOrientationID");
ALTER TABLE "Characters" ADD CONSTRAINT "FK_Characters_Character_EroticaPreferences" FOREIGN KEY("EroticaPreferences") REFERENCES "Character_EroticaPreferences" ("EroticaPreferenceID");
ALTER TABLE "Characters" ADD CONSTRAINT "FK_Characters_Character_LFRPStatuses" FOREIGN KEY("LFRPStatus") REFERENCES "Character_LFRPStatuses" ("LFRPStatusID");
ALTER TABLE "Characters" ADD CONSTRAINT "FK_Characters_Character_Statuses" FOREIGN KEY("CharacterStatusID") REFERENCES "Character_Statuses" ("CharacterStatusID");
ALTER TABLE "Characters" ADD CONSTRAINT "FK_Characters_Sources" FOREIGN KEY("CharacterSourceID") REFERENCES "Sources" ("SourceID");
ALTER TABLE "Characters" ADD CONSTRAINT "FK_Characters_Universes" FOREIGN KEY("UniverseId") REFERENCES "Universes" ("UniverseId");
ALTER TABLE "Characters" ADD CONSTRAINT "FK_Characters_Character_Type" FOREIGN KEY("TypeId") REFERENCES "Character_Type" ("TypeId");

ALTER TABLE "Character_Avatars" ADD CONSTRAINT "FK_Character_Avatars_Characters" FOREIGN KEY("CharacterId") REFERENCES "Characters" ("CharacterId") ON DELETE CASCADE;
ALTER TABLE "Character_Bookmarks" ADD CONSTRAINT "FK_Character_Bookmarks_Characters" FOREIGN KEY("CharacterId") REFERENCES "Characters" ("CharacterId") ON DELETE CASCADE;
ALTER TABLE "Character_Bookmarks" ADD CONSTRAINT "FK_Character_Bookmarks_Users" FOREIGN KEY("UserId") REFERENCES "Users" ("UserId");
ALTER TABLE "Character_Inlines" ADD CONSTRAINT "FK_Character_Inlines_Characters" FOREIGN KEY("CharacterId") REFERENCES "Characters" ("CharacterId") ON DELETE CASCADE;

ALTER TABLE "Character_Images" ADD CONSTRAINT "FK_Character_Images_Characters" FOREIGN KEY("CharacterId") REFERENCES "Characters" ("CharacterId") ON DELETE CASCADE;
ALTER TABLE "Character_Image_Comments" ADD CONSTRAINT "FK_Character_Image_Comments_Character_Images" FOREIGN KEY("ImageID") REFERENCES "Character_Images" ("CharacterImageID") ON DELETE CASCADE;
ALTER TABLE "Character_Image_Comments" ADD CONSTRAINT "FK_Character_Image_Comments_Characters" FOREIGN KEY("CharacterId") REFERENCES "Characters" ("CharacterId");

ALTER TABLE "Character_Genres" ADD CONSTRAINT "FK_Character_Genres_Characters" FOREIGN KEY("CharacterId") REFERENCES "Characters" ("CharacterId") ON DELETE CASCADE;
ALTER TABLE "Character_Genres" ADD CONSTRAINT "FK_Character_Genres_Genres" FOREIGN KEY("GenreId") REFERENCES "Genres" ("GenreId") ON DELETE CASCADE;

ALTER TABLE "Character_Universes" ADD CONSTRAINT "FK_Character_Universes_Characters" FOREIGN KEY("CharacterId") REFERENCES "Characters" ("CharacterId") ON DELETE CASCADE;
ALTER TABLE "Character_Universes" ADD CONSTRAINT "FK_Character_Universes_Universes" FOREIGN KEY("UniverseId") REFERENCES "Universes" ("UniverseId") ON DELETE CASCADE;

ALTER TABLE "Chat_Rooms" ADD CONSTRAINT "FK_Chat_Rooms_Content_Ratings" FOREIGN KEY("ContentRatingId") REFERENCES "Content_Ratings" ("ContentRatingId");
ALTER TABLE "Chat_Rooms" ADD CONSTRAINT "FK_Chat_Rooms_Universes" FOREIGN KEY("UniverseId") REFERENCES "Universes" ("UniverseId") ON DELETE CASCADE;
ALTER TABLE "Chat_Rooms" ADD CONSTRAINT "FK_Chat_Rooms_Chat_Room_Statuses" FOREIGN KEY("ChatRoomStatusId") REFERENCES "Chat_Room_Statuses" ("ChatRoomStatusId");

ALTER TABLE "Chat_Room_Invites" ADD CONSTRAINT "FK_Chat_Room_Invites_Chat_Rooms" FOREIGN KEY("ChatRoomId") REFERENCES "Chat_Rooms" ("ChatRoomId");
ALTER TABLE "Chat_Room_Invites" ADD CONSTRAINT "FK_Chat_Room_Invites_Users" FOREIGN KEY("UserId") REFERENCES "Users" ("UserId");

ALTER TABLE "Chat_Room_Locks" ADD CONSTRAINT "FK_Chat_Room_Locks_Chat_Rooms" FOREIGN KEY("ChatRoomId") REFERENCES "Chat_Rooms" ("ChatRoomId") ON DELETE CASCADE;
ALTER TABLE "Chat_Room_Locks" ADD CONSTRAINT "FK_Chat_Room_Locks_Users" FOREIGN KEY("UserId") REFERENCES "Users" ("UserId");

ALTER TABLE "Chat_Room_Posts" ADD CONSTRAINT "FK_Chat_Room_Posts_Chat_Rooms" FOREIGN KEY("ChatRoomId") REFERENCES "Chat_Rooms" ("ChatRoomId") ON DELETE CASCADE;
ALTER TABLE "Chat_Room_Posts" ADD CONSTRAINT "FK_Chat_Room_Posts_Users" FOREIGN KEY("UserId") REFERENCES "Users" ("UserId");
ALTER TABLE "Chat_Room_Posts" ADD CONSTRAINT "FK_Chat_Room_Posts_Characters" FOREIGN KEY("CharacterId") REFERENCES "Characters" ("CharacterId");

ALTER TABLE "Memberships" ADD CONSTRAINT "FK_Memberships_Users" FOREIGN KEY("UserId") REFERENCES "Users" ("UserId");
ALTER TABLE "Memberships" ADD CONSTRAINT "FK_Memberships_MembershipTypes" FOREIGN KEY("MembershipTypeId") REFERENCES "MembershipTypes" ("MembershipTypeId");
ALTER TABLE "QuickLinks" ADD CONSTRAINT "FK_QuickLinks_Users" FOREIGN KEY("UserId") REFERENCES "Users" ("UserId");

ALTER TABLE "Stories" ADD CONSTRAINT "FK_Stories_Users" FOREIGN KEY("UserId") REFERENCES "Users" ("UserId");
ALTER TABLE "Stories" ADD CONSTRAINT "FK_Stories_Content_Ratings" FOREIGN KEY("ContentRatingId") REFERENCES "Content_Ratings" ("ContentRatingId");
ALTER TABLE "Stories" ADD CONSTRAINT "FK_Stories_Universes" FOREIGN KEY("UniverseId") REFERENCES "Universes" ("UniverseId");

ALTER TABLE "Story_Genres" ADD CONSTRAINT "FK_Story_Genres_Stories" FOREIGN KEY("StoryId") REFERENCES "Stories" ("StoryId") ON DELETE CASCADE;
ALTER TABLE "Story_Genres" ADD CONSTRAINT "FK_Story_Genres_Genres" FOREIGN KEY("GenreId") REFERENCES "Genres" ("GenreId") ON DELETE CASCADE;

ALTER TABLE "Story_Posts" ADD CONSTRAINT "FK_Story_Posts_Stories" FOREIGN KEY("StoryId") REFERENCES "Stories" ("StoryId");
ALTER TABLE "Story_Posts" ADD CONSTRAINT "FK_Story_Posts_Characters" FOREIGN KEY("CharacterId") REFERENCES "Characters" ("CharacterId");

ALTER TABLE "Story_Views" ADD CONSTRAINT "FK_Story_Views_Stories" FOREIGN KEY("StoryId") REFERENCES "Stories" ("StoryId");
ALTER TABLE "Story_Views" ADD CONSTRAINT "FK_Story_Views_Users" FOREIGN KEY("UserId") REFERENCES "Users" ("UserId");

ALTER TABLE "Threads" ADD CONSTRAINT "FK_Threads_Users" FOREIGN KEY("CreatedBy") REFERENCES "Users" ("UserId");

ALTER TABLE "Thread_Messages" ADD CONSTRAINT "FK_Thread_Messages_Threads" FOREIGN KEY("ThreadID") REFERENCES "Threads" ("ThreadID") ON DELETE CASCADE;
ALTER TABLE "Thread_Messages" ADD CONSTRAINT "FK_Thread_Messages_Characters" FOREIGN KEY("CreatorID") REFERENCES "Characters" ("CharacterId");

ALTER TABLE "Thread_Users" ADD CONSTRAINT "FK_Thread_Users_Users" FOREIGN KEY("UserId") REFERENCES "Users" ("UserId");
ALTER TABLE "Thread_Users" ADD CONSTRAINT "FK_Thread_Users_Threads" FOREIGN KEY("ThreadID") REFERENCES "Threads" ("ThreadID") ON DELETE CASCADE;
ALTER TABLE "Thread_Users" ADD CONSTRAINT "FK_Thread_Users_Characters" FOREIGN KEY("CharacterId") REFERENCES "Characters" ("CharacterId");

ALTER TABLE "ToDo_Items" ADD CONSTRAINT "FK_ToDo_Items_Users" FOREIGN KEY("AssignedToUserId") REFERENCES "Users" ("UserId");
ALTER TABLE "ToDo_Items" ADD CONSTRAINT "FK_ToDo_Items_Characters" FOREIGN KEY("AssignedToCharacterId") REFERENCES "Characters" ("CharacterId");
ALTER TABLE "ToDo_Items" ADD CONSTRAINT "FK_ToDo_Items_Users_CreatedBy" FOREIGN KEY("CreatedByUserId") REFERENCES "Users" ("UserId");
ALTER TABLE "ToDo_Items" ADD CONSTRAINT "FK_ToDo_Items_ToDo_Item_Types" FOREIGN KEY("TypeId") REFERENCES "ToDo_Item_Types" ("TypeId");
ALTER TABLE "ToDo_Items" ADD CONSTRAINT "FK_ToDo_Items_ToDo_Item_Statuses" FOREIGN KEY("StatusID") REFERENCES "ToDo_Item_Statuses" ("StatusID");

ALTER TABLE "ToDo_Item_Votes" ADD CONSTRAINT "FK_ToDo_Item_Votes_ToDo_Items" FOREIGN KEY("ToDoItemId") REFERENCES "ToDo_Items" ("ItemId");
ALTER TABLE "ToDo_Item_Votes" ADD CONSTRAINT "FK_ToDo_Item_Votes_Users" FOREIGN KEY("UserId") REFERENCES "Users" ("UserId");

ALTER TABLE "Universes" ADD CONSTRAINT "FK_Universes_Content_Ratings" FOREIGN KEY("ContentRatingId") REFERENCES "Content_Ratings" ("ContentRatingId");
ALTER TABLE "Universes" ADD CONSTRAINT "FK_Universes_Users" FOREIGN KEY("UniverseOwnerID") REFERENCES "Users" ("UserId");
ALTER TABLE "Universes" ADD CONSTRAINT "FK_Universes_Sources" FOREIGN KEY("SourceTypeId") REFERENCES "Sources" ("SourceID");

ALTER TABLE "Universe_Admins" ADD CONSTRAINT "FK_Universe_Admins_Universes" FOREIGN KEY("UniverseId") REFERENCES "Universes" ("UniverseId");
ALTER TABLE "Universe_Admins" ADD CONSTRAINT "FK_Universe_Admins_Users" FOREIGN KEY("UserId") REFERENCES "Users" ("UserId");

ALTER TABLE "Universe_Bans" ADD CONSTRAINT "FK_Universe_Bans_Universes" FOREIGN KEY("UniverseId") REFERENCES "Universes" ("UniverseId");
ALTER TABLE "Universe_Bans" ADD CONSTRAINT "FK_Universe_Bans_Users" FOREIGN KEY("UserId") REFERENCES "Users" ("UserId");

ALTER TABLE "Universe_Pending_Invites" ADD CONSTRAINT "FK_Universe_Pending_Invites_Universes" FOREIGN KEY("UniverseId") REFERENCES "Universes" ("UniverseId");
ALTER TABLE "Universe_Pending_Invites" ADD CONSTRAINT "FK_Universe_Pending_Invites_Users" FOREIGN KEY("UserId") REFERENCES "Users" ("UserId");

ALTER TABLE "Universe_Genres" ADD CONSTRAINT "FK_Universe_Genres_Universes" FOREIGN KEY("UniverseId") REFERENCES "Universes" ("UniverseId") ON DELETE CASCADE;
ALTER TABLE "Universe_Genres" ADD CONSTRAINT "FK_Universe_Genres_Genres" FOREIGN KEY("GenreId") REFERENCES "Genres" ("GenreId") ON DELETE CASCADE;

ALTER TABLE "User_Badges" ADD CONSTRAINT "FK_User_Badges_Users" FOREIGN KEY("UserId") REFERENCES "Users" ("UserId") ON DELETE CASCADE;
ALTER TABLE "User_Badges" ADD CONSTRAINT "FK_User_Badges_Badges" FOREIGN KEY("BadgeID") REFERENCES "Badges" ("BadgeID");

ALTER TABLE "User_Notes" ADD CONSTRAINT "FK_User_Notes_Users_SubmittedBy" FOREIGN KEY("CreatedByUserId") REFERENCES "Users" ("UserId");
ALTER TABLE "User_Notes" ADD CONSTRAINT "FK_User_Notes_Users" FOREIGN KEY("UserId") REFERENCES "Users" ("UserId") ON DELETE CASCADE;

ALTER TABLE "Proposals" ADD CONSTRAINT "FK_Proposals_Users" FOREIGN KEY("UserId") REFERENCES "Users" ("UserId") ON DELETE CASCADE;
ALTER TABLE "Proposals" ADD CONSTRAINT "FK_Proposals_Content_Ratings" FOREIGN KEY("ContentRatingId") REFERENCES "Content_Ratings" ("ContentRatingId");
ALTER TABLE "Proposals" ADD CONSTRAINT "FK_Proposals_Proposal_Statuses" FOREIGN KEY("StatusID") REFERENCES "Proposal_Statuses" ("StatusID");

ALTER TABLE "Proposal_Genres" ADD CONSTRAINT "FK_Proposal_Genres_Proposals" FOREIGN KEY("ProposalID") REFERENCES "Proposals" ("ProposalID") ON DELETE CASCADE;
ALTER TABLE "Proposal_Genres" ADD CONSTRAINT "FK_Proposal_Genres_Genres" FOREIGN KEY("GenreId") REFERENCES "Genres" ("GenreId") ON DELETE CASCADE;

ALTER TABLE "Proposal_Responses" ADD CONSTRAINT "FK_Proposal_Responses_Proposals" FOREIGN KEY("ProposalID") REFERENCES "Proposals" ("ProposalID") ON DELETE CASCADE;
ALTER TABLE "Proposal_Responses" ADD CONSTRAINT "FK_Proposal_Responses_Users" FOREIGN KEY("UserId") REFERENCES "Users" ("UserId");
ALTER TABLE "Proposal_Responses" ADD CONSTRAINT "FK_Proposal_Responses_Characters" FOREIGN KEY("CharacterId") REFERENCES "Characters" ("CharacterId");


-- ====================================================================
--  SECTION 4: VIEWS
-- ====================================================================

CREATE OR REPLACE VIEW "ActiveChatrooms" AS
SELECT
    CR."ChatRoomId",
    CR."ChatRoomName",
    CR."SubmittedByUserId",
    CR."ContentRatingId",
    MAX(CRP."PostDateTime") AS "LastPostTime",
    CR_Rating."ContentRating"
FROM "Chat_Rooms" AS CR
INNER JOIN "Content_Ratings" AS CR_Rating ON CR."ContentRatingId" = CR_Rating."ContentRatingId"
LEFT OUTER JOIN "Chat_Room_Posts" AS CRP ON CR."ChatRoomId" = CRP."ChatRoomId"
GROUP BY CR."ChatRoomId", CR_Rating."ContentRating";

CREATE OR REPLACE VIEW "CharactersForListing" AS
SELECT
    C."CharacterId",
    C."UserId",
    C."CharacterDisplayName",
    C."CharacterFirstName",
    C."CharacterMiddleName",
    C."CharacterLastName",
    C."IsActive",
    C."IsApproved",
    U."LastAction",
    U."ShowWhenOnline",
    CI."CharacterImageURL" AS "DisplayImageUrl",
    CA."AvatarImageUrl",
    CASE WHEN U."IsAdmin" = TRUE THEN 'AdminCharacter' ELSE 'NormalCharacter' END AS "CharacterNameClass",
    C."TypeId",
    C."LFRPStatus",
    C."IsPrivate",
    U."UserTypeId",
    C."CharacterGender" AS "GenderID",
    C."CharacterSourceID",
    C."SexualOrientation" AS "SexualOrientationID",
    C."EroticaPreferences" AS "EroticaPreferenceID",
    C."PostLengthMin" AS "PostLengthMinID",
    C."PostLengthMax" AS "PostLengthMaxID",
    C."LiteracyLevel" AS "LiteracyLevelID",
    C."DateSubmitted"
FROM "Characters" AS C
INNER JOIN "Users" AS U ON C."UserId" = U."UserId"
LEFT JOIN "Character_Images" AS CI ON C."CharacterId" = CI."CharacterId" AND CI."IsPrimary" = TRUE
LEFT JOIN "Character_Avatars" AS CA ON C."CharacterId" = CA."CharacterId";

CREATE OR REPLACE VIEW "Article_Categories" AS
SELECT "CategoryId", "CategoryName" FROM "Categories";

CREATE OR REPLACE VIEW "ArticlesForListing" AS
SELECT
    A."ArticleId",
    A."ArticleTitle",
    A."DateSubmitted",
    A."CreatedDateTime",
    A."IsPrivate",
    A."IsPublished",
    U."Username",
    CAT."CategoryName",
    A."CategoryId",
    A."OwnerUserId",
    A."UniverseId",
    CR."ContentRating"
FROM "Articles" AS A
INNER JOIN "Users" AS U ON A."OwnerUserId" = U."UserId"
INNER JOIN "Content_Ratings" AS CR ON A."ContentRatingId" = CR."ContentRatingId"
LEFT OUTER JOIN "Categories" AS CAT ON A."CategoryId" = CAT."CategoryId";

CREATE OR REPLACE VIEW "ArticlesWithDetails" AS
SELECT
    A."ArticleId",
    A."OwnerUserId",
    A."CategoryId",
    A."ArticleTitle",
    A."ArticleContent",
    A."DateSubmitted",
    A."CreatedDateTime",
    A."IsPublished",
    A."ContentRatingId",
    A."IsPrivate",
    A."DisableLinkify",
    A."UniverseId",
    C."CategoryName",
    U."Username" AS "AuthorUsername",
    U."Username" AS "OwnerUserName",
    CR."ContentRating"
FROM "Articles" AS A
INNER JOIN "Users" AS U ON A."OwnerUserId" = U."UserId"
LEFT JOIN "Categories" AS C ON A."CategoryId" = C."CategoryId"
LEFT JOIN "Content_Ratings" AS CR ON A."ContentRatingId" = CR."ContentRatingId";

CREATE OR REPLACE VIEW "CharactersWithDetails" AS
SELECT
    C."CharacterId",
    C."UserId",
    C."CharacterDisplayName",
    C."CharacterFirstName",
    C."CharacterMiddleName",
    C."CharacterLastName",
    C."IsActive",
    C."IsApproved",
    C."ProfileCSS",
    C."LastUpdated",
    C."DateSubmitted",
    C."SubmittedBy",
    C."IsPrivate",
    C."ProfileHTML",
    C."LFRPStatus",
    C."DisableLinkify",
    C."CharacterBio",
    C."CharacterGender",
    C."MatureContent",
    C."EroticaPreferences",
    C."CharacterSourceID",
    C."CharacterStatusID",
    C."TypeId",
    C."CustomProfileEnabled",
    C."UniverseId",
    U."Username",
    U."EmailAddress",
    U."LastAction",
    U."ShowWhenOnline",
    U."IsAdmin",
    U."ShowWriterLinkOnCharacters",
    U."LastLogin",
    G."Gender",
    LL."LiteracyLevel",
    PLMax."PostLength" AS "PostLengthMax",
    PLMin."PostLength" AS "PostLengthMin",
    SO."SexualOrientation",
    EP."EroticaPreference",
    CS."StatusName" AS "CharacterStatus",
    LFRP."LFRPStatus" AS "LFRPStatusName",
    SRC."Source" AS "CharacterSource",
    COALESCE(CI."CharacterImageURL", '/Images/DefaultUser.png') AS "DisplayImageUrl",
    C."LiteracyLevel" AS "LiteracyLevelID",
    C."PostLengthMax" AS "PostLengthMaxID",
    C."PostLengthMin" AS "PostLengthMinID",
    UN."UniverseName",
    Badges."BadgeID",
    Badges."CharacterNameClass",
    CT."TypeName" AS "CharacterType",
    C."RecentEvents",
    C."OtherInfo",
    CA."AvatarImageUrl",
    C."ViewCount",
    U."Timezone",
    (SELECT COUNT(*) FROM "Character_Bookmarks" WHERE "CharacterId" = C."CharacterId") AS "BookmarkCount"
FROM "Characters" AS C
    INNER JOIN "Users" AS U ON C."UserId" = U."UserId"
    LEFT OUTER JOIN "Character_Genders" AS G ON C."CharacterGender" = G."GenderID"
    LEFT OUTER JOIN "Character_LiteracyLevels" AS LL ON C."LiteracyLevel" = LL."LiteracyLevelID"
    LEFT OUTER JOIN "Character_PostLengths" AS PLMax ON C."PostLengthMax" = PLMax."PostLengthID"
    LEFT OUTER JOIN "Character_PostLengths" AS PLMin ON C."PostLengthMin" = PLMin."PostLengthID"
    LEFT OUTER JOIN "Character_SexualOrientations" AS SO ON C."SexualOrientation" = SO."SexualOrientationID"
    LEFT OUTER JOIN "Character_EroticaPreferences" AS EP ON C."EroticaPreferences" = EP."EroticaPreferenceID"
    LEFT OUTER JOIN "Character_Images" AS CI ON C."CharacterId" = CI."CharacterId" AND CI."IsPrimary" = TRUE
    LEFT OUTER JOIN "Character_Statuses" AS CS ON C."CharacterStatusID" = CS."CharacterStatusID"
    LEFT OUTER JOIN "Character_LFRPStatuses" AS LFRP ON C."LFRPStatus" = LFRP."LFRPStatusID"
    LEFT OUTER JOIN "Sources" AS SRC ON C."CharacterSourceID" = SRC."SourceID"
    LEFT OUTER JOIN "Universes" AS UN ON C."UniverseId" = UN."UniverseId"
    LEFT OUTER JOIN "Character_Type" AS CT ON C."TypeId" = CT."TypeId"
    LEFT OUTER JOIN "User_Badges" ON C."CharacterId" = "User_Badges"."AssignedToCharacterId"
    LEFT OUTER JOIN "Badges" ON "User_Badges"."BadgeID" = "Badges"."BadgeID"
    LEFT OUTER JOIN "Character_Avatars" AS CA ON C."CharacterId" = CA."CharacterId";

CREATE OR REPLACE VIEW "CharactersWithDisplayImages" AS
SELECT
    C."CharacterId", C."UserId", C."CharacterDisplayName", C."CharacterFirstName", C."CharacterMiddleName", C."CharacterLastName", C."IsActive", C."IsApproved", C."ProfileCSS", C."LastUpdated", C."DateSubmitted", C."SubmittedBy", C."IsPrivate", C."ProfileHTML", C."LFRPStatus", C."DisableLinkify", C."CharacterBio", C."CharacterGender", C."LiteracyLevel", C."PostLengthMax", C."PostLengthMin", C."MatureContent", C."SexualOrientation", C."EroticaPreferences", C."CharacterSourceID", C."TypeId",
    CI."CharacterImageURL" AS "DisplayImageUrl",
    CI."IsPrimary",
    CI."IsMature"
FROM "Characters" AS C
LEFT JOIN "Character_Images" AS CI ON C."CharacterId" = CI."CharacterId" AND CI."IsPrimary" = TRUE;

CREATE OR REPLACE VIEW "ChatRoomsForListing" AS
SELECT
    CR."ChatRoomId", CR."ChatRoomName", CR."SubmittedByUserId", CR."ContentRatingId", CR."UniverseId", CR."ChatRoomStatusId",
    CRS."ChatRoomStatusName",
    UN."UniverseOwnerID",
    U."Username",
    UN."UniverseName",
    (SELECT MAX("PostDateTime") FROM "Chat_Room_Posts" WHERE "ChatRoomId" = CR."ChatRoomId") AS "LastPostTime",
    CR_Rating."ContentRating"
FROM "Chat_Rooms" AS CR
INNER JOIN "Content_Ratings" AS CR_Rating ON CR."ContentRatingId" = CR_Rating."ContentRatingId"
LEFT OUTER JOIN "Users" AS U ON CR."SubmittedByUserId" = U."UserId"
LEFT OUTER JOIN "Universes" AS UN ON CR."UniverseId" = UN."UniverseId"
LEFT OUTER JOIN "Chat_Room_Statuses" AS CRS ON CR."ChatRoomStatusId" = CRS."ChatRoomStatusId";

CREATE OR REPLACE VIEW "ChatRoomsWithDetails" AS
SELECT
    CR."ChatRoomId", CR."ChatRoomName", CR."ChatRoomDescription", CR."SubmittedByUserId", CR."ContentRatingId", CR."UniverseId", CR."ChatRoomStatusId",
    CRS."ChatRoomStatusName",
    UN."UniverseOwnerID",
    U."Username",
    UN."UniverseName",
    CR_Rating."ContentRating",
    CR_Rating."ContentRatingDescription"
FROM "Chat_Rooms" AS CR
LEFT OUTER JOIN "Content_Ratings" AS CR_Rating ON CR."ContentRatingId" = CR_Rating."ContentRatingId"
LEFT OUTER JOIN "Users" AS U ON CR."SubmittedByUserId" = U."UserId"
LEFT OUTER JOIN "Universes" AS UN ON CR."UniverseId" = UN."UniverseId"
LEFT OUTER JOIN "Chat_Room_Statuses" AS CRS ON CR."ChatRoomStatusId" = CRS."ChatRoomStatusId";

CREATE OR REPLACE VIEW "ChatRoomPostsWithDetails" AS
SELECT
    CRP."ChatPostID", CRP."ChatRoomId", CRP."UserId", CRP."PostContent", CRP."PostDateTime", CRP."CharacterId",
    C."CharacterDisplayName",
    C."DisplayImageUrl",
    C."CharacterNameClass",
    C."ShowWhenOnline",
    C."LastAction"
FROM "Chat_Room_Posts" AS CRP
LEFT JOIN "CharactersWithDetails" AS C ON CRP."CharacterId" = C."CharacterId";

CREATE OR REPLACE VIEW "ImageCommentsWithDetails" AS
SELECT
    IC."ImageCommentID",
    IC."ImageID",
    IC."CharacterId" AS "CommenterCharacterId",
    C."CharacterDisplayName" AS "CommenterUsername",
    IC."CommentText",
    IC."CommentTimeStamp",
    IC."IsRead",
    CI."CharacterId" AS "ImageOwnerCharacterId",
    CH."UserId" AS "ImageOwnerUserId",
    CH."CharacterDisplayName" AS "ImageOwnerCharacterDisplayName",
    CI."IsMature" AS "ImageIsMature",
    B."CharacterNameClass",
    CI."CharacterImageURL"
FROM "Character_Image_Comments" AS IC
INNER JOIN "Character_Images" AS CI ON IC."ImageID" = CI."CharacterImageID"
INNER JOIN "Characters" AS CH ON CI."CharacterId" = CH."CharacterId"
INNER JOIN "Characters" AS C ON IC."CharacterId" = C."CharacterId"
LEFT OUTER JOIN "User_Badges" AS UB ON C."CharacterId" = UB."AssignedToCharacterId"
LEFT OUTER JOIN "Badges" AS B ON UB."BadgeID" = B."BadgeID";

CREATE OR REPLACE VIEW "PopularStories" AS
SELECT S."StoryId", S."UserId", S."StoryTitle", S."StoryContent", MAX(SP."PostDateTime") AS "LastPostDateTime", COUNT(SP."StoryPostID") AS "PostCount"
FROM "Stories" AS S
LEFT JOIN "Story_Posts" AS SP ON S."StoryId" = SP."StoryId"
GROUP BY S."StoryId", S."UserId", S."StoryTitle", S."StoryContent";

CREATE OR REPLACE VIEW "RandomizedCharactersForListing" AS
SELECT "CharacterId", "UserId", "CharacterDisplayName", "CharacterFirstName", "CharacterMiddleName", "CharacterLastName", "IsActive", "IsApproved", "LastAction", "ShowWhenOnline", "DisplayImageUrl", "CharacterNameClass", "TypeId", "LFRPStatus"
FROM "CharactersForListing"
ORDER BY random();

CREATE OR REPLACE VIEW "StoriesForListing" AS
SELECT
    S."StoryId", S."UserId", S."StoryTitle", S."StoryContent", S."StoryDescription", S."DateCreated", S."LastUpdated", S."ContentRatingId", S."IsPrivate", S."UniverseId",
    U."Username" AS "AuthorUsername",
    UN."UniverseName",
    CR."ContentRating" AS "StoryRating",
    CR."ContentRating"
FROM "Stories" AS S
INNER JOIN "Users" AS U ON S."UserId" = U."UserId"
LEFT JOIN "Content_Ratings" AS CR ON S."ContentRatingId" = CR."ContentRatingId"
LEFT JOIN "Universes" AS UN ON S."UniverseId" = UN."UniverseId";

CREATE OR REPLACE VIEW "StoriesWithDetails" AS
SELECT
    S."StoryId", S."UserId", S."StoryTitle", S."StoryContent", S."StoryDescription", S."DateCreated", S."LastUpdated", S."ContentRatingId", S."IsPrivate", S."UniverseId",
    U."Username" AS "AuthorUsername",
    UN."UniverseName",
    CR."ContentRating" AS "StoryRating",
    CR."ContentRating"
FROM "Stories" AS S
INNER JOIN "Users" AS U ON S."UserId" = U."UserId"
LEFT JOIN "Content_Ratings" AS CR ON S."ContentRatingId" = CR."ContentRatingId"
LEFT JOIN "Universes" AS UN ON S."UniverseId" = UN."UniverseId";

CREATE OR REPLACE VIEW "StoryPostsWithCharacterInfo" AS
SELECT
    sp."StoryPostID",
    sp."StoryId",
    sp."PostContent",
    sp."PostDateTime" AS "DatePosted",
    c."CharacterId",
    c."UserId" AS "CharacterOwnerUserId",
    c."CharacterDisplayName",
    c."LastAction",
    c."ShowWhenOnline",
    c."DisplayImageUrl",
    c."CharacterNameClass"
FROM "Story_Posts" AS sp
LEFT JOIN "CharactersWithDetails" AS c ON sp."CharacterId" = c."CharacterId";

CREATE OR REPLACE VIEW "ThreadsWithDetails" AS
SELECT
    T."ThreadID", T."ThreadTitle", T."LastMessage", COALESCE(T."LastMessage", T."DateCreated") AS "LastUpdateDate", T."CreatedBy" AS "CreatorUserId",
    TU."UserId",
    TU."ReadStatusID",
    TU."CharacterId",
    U."Username" AS "CreatorUsername"
FROM "Threads" AS T
INNER JOIN "Thread_Users" AS TU ON T."ThreadID" = TU."ThreadID"
LEFT JOIN "Users" AS U ON T."CreatedBy" = U."UserId";

CREATE OR REPLACE VIEW "RecentUserThreads" AS
SELECT
    T."ThreadID",
    T."ThreadTitle" AS "ThreadName",
    COALESCE(T."LastMessage", T."DateCreated") AS "LastMessageDate",
    (SELECT "MessageContent" FROM "Thread_Messages" WHERE "ThreadID" = T."ThreadID" ORDER BY "TimeStamp" DESC LIMIT 1) AS "LastMessage",
    (SELECT string_agg(C."CharacterDisplayName", ', ') FROM "Thread_Users" TU_Inner JOIN "Characters" C ON TU_Inner."CharacterId" = C."CharacterId" WHERE TU_Inner."ThreadID" = T."ThreadID" AND C."UserId" != TU."UserId") AS "Opponent",
    TU."ReadStatusID",
    (SELECT C."TypeId" FROM "Characters" AS C WHERE C."CharacterId" = (SELECT TM."CreatorID" FROM "Thread_Messages" AS TM WHERE TM."ThreadID" = T."ThreadID" ORDER BY TM."TimeStamp" ASC LIMIT 1)) AS "TypeId",
    (SELECT U."Username" FROM "Users" AS U WHERE U."UserId" = T."CreatedBy") AS "CreatorUsername",
    (SELECT "MessageContent" FROM "Thread_Messages" WHERE "ThreadID" = T."ThreadID" ORDER BY "TimeStamp" DESC LIMIT 1) AS "LastMessageContent",
    (SELECT "CreatorID" FROM "Thread_Messages" WHERE "ThreadID" = T."ThreadID" ORDER BY "TimeStamp" DESC LIMIT 1) AS "LastMessageCharacterId",
    (SELECT "CharacterDisplayName" FROM "Characters" WHERE "CharacterId" = (SELECT "CreatorID" FROM "Thread_Messages" WHERE "ThreadID" = T."ThreadID" ORDER BY "TimeStamp" DESC LIMIT 1)) AS "LastMessageCharacterName"
FROM "Threads" AS T
INNER JOIN "Thread_Users" AS TU ON T."ThreadID" = TU."ThreadID";

CREATE OR REPLACE VIEW "CurrentUserThreadsWithDetails" AS
SELECT
    T."ThreadID",
    T."ThreadTitle" AS "ThreadName",
    COALESCE(T."LastMessage", T."DateCreated") AS "LastUpdateDate",
    TU."UserId",
    TU."ReadStatusID",
    TU."ReadStatusID" AS "ReadStatus",
    TU."CharacterId",
    (SELECT C."TypeId" FROM "Characters" AS C WHERE C."CharacterId" = (SELECT TM."CreatorID" FROM "Thread_Messages" AS TM WHERE TM."ThreadID" = T."ThreadID" ORDER BY TM."TimeStamp" ASC LIMIT 1)) AS "TypeId",
    (SELECT C."UserId" FROM "Characters" AS C WHERE C."CharacterId" = (SELECT "CreatorID" FROM "Thread_Messages" WHERE "ThreadID" = T."ThreadID" ORDER BY "TimeStamp" DESC LIMIT 1)) AS "LastPostByUserId",
    (SELECT U."Username" FROM "Users" AS U WHERE U."UserId" = T."CreatedBy") AS "CreatorUsername",
    (SELECT "MessageContent" FROM "Thread_Messages" WHERE "ThreadID" = T."ThreadID" ORDER BY "TimeStamp" DESC LIMIT 1) AS "LastMessageContent",
    (SELECT "CreatorID" FROM "Thread_Messages" WHERE "ThreadID" = T."ThreadID" ORDER BY "TimeStamp" DESC LIMIT 1) AS "LastMessageCharacterId",
    (SELECT "CharacterDisplayName" FROM "Characters" WHERE "CharacterId" = (SELECT "CreatorID" FROM "Thread_Messages" WHERE "ThreadID" = T."ThreadID" ORDER BY "TimeStamp" DESC LIMIT 1)) AS "LastMessageCharacterName"
FROM "Threads" AS T
INNER JOIN "Thread_Users" AS TU ON T."ThreadID" = TU."ThreadID";

CREATE OR REPLACE VIEW "ThreadCharacters" AS
SELECT
    TU."ThreadID", TU."CharacterId",
    C."CharacterDisplayName",
    C."UserId",
    C."UniverseId",
    IMG."CharacterImageURL"
FROM "Thread_Users" AS TU
INNER JOIN "Characters" AS C ON TU."CharacterId" = C."CharacterId"
LEFT JOIN "Character_Images" AS IMG ON C."CharacterId" = IMG."CharacterId" AND IMG."IsPrimary" = TRUE;

CREATE OR REPLACE VIEW "ThreadMessagesWithCharacterInfo" AS
SELECT
    TM."ThreadMessageID", TM."ThreadID", TM."CreatorID", TM."CreatorID" AS "CharacterId", TM."MessageContent", TM."TimeStamp", TM."TimeStamp" AS "MessageDate",
    C."CharacterDisplayName",
    C."UserId" AS "CharacterOwnerUserId",
    C."UserId",
    C."DisplayImageUrl",
    C."CharacterNameClass",
    C."ShowWhenOnline",
    C."LastAction"
FROM "Thread_Messages" AS TM
INNER JOIN "CharactersWithDetails" AS C ON TM."CreatorID" = C."CharacterId";

CREATE OR REPLACE VIEW "ToDoItemsWithDetails" AS
SELECT
    TDI."ItemId", TDI."ItemName", TDI."ItemDescription", TDI."CreatedDateTime", TDI."CreatedByUserId", CreatedByUser."Username" AS "CreatedByUsername", TDI."TypeId", TDIT."TypeName", TDI."AssignedToUserId", AssignedUser."Username" AS "AssignedToUsername", TDI."AssignedToCharacterId", C."CharacterDisplayName" AS "AssignedToCharacterName", TDI."StatusID", TDIS."StatusName", TDI."CharacterAssignable",
    COUNT(TDIV."ToDoItemVoteID") AS "VoteCount"
FROM "ToDo_Items" AS TDI
LEFT JOIN "Users" AS CreatedByUser ON TDI."CreatedByUserId" = CreatedByUser."UserId"
LEFT JOIN "ToDo_Item_Types" AS TDIT ON TDI."TypeId" = TDIT."TypeId"
LEFT JOIN "Users" AS AssignedUser ON TDI."AssignedToUserId" = AssignedUser."UserId"
LEFT JOIN "Characters" AS C ON TDI."AssignedToCharacterId" = C."CharacterId"
LEFT JOIN "ToDo_Item_Statuses" AS TDIS ON TDI."StatusID" = TDIS."StatusID"
LEFT JOIN "ToDo_Item_Votes" AS TDIV ON TDI."ItemId" = TDIV."ToDoItemId"
GROUP BY TDI."ItemId", CreatedByUser."Username", TDIT."TypeName", AssignedUser."Username", C."CharacterDisplayName", TDIS."StatusName";

CREATE OR REPLACE VIEW "UniversesForListing" AS
SELECT
    UV."UniverseId", UV."UniverseName", UV."UniverseDescription", UV."UniverseOwnerID", UV."CreatedDate", UV."ContentRatingId", UV."SourceTypeId", UV."StatusID", UV."RequiresApprovalOnJoin", UV."DisableLinkify",
    S."Source" AS "SourceType",
    (SELECT COUNT("CharacterId") FROM "Character_Universes" WHERE "UniverseId" = UV."UniverseId") AS "CharacterCount",
    (SELECT COUNT("ChatRoomId") FROM "Chat_Rooms" WHERE "UniverseId" = UV."UniverseId") AS "ChatRoomCount",
    U."Username" AS "OwnerUsername",
    U."Username" AS "UniverseOwnerName",
    CR."ContentRating"
FROM "Universes" AS UV
INNER JOIN "Users" AS U ON UV."UniverseOwnerID" = U."UserId"
INNER JOIN "Content_Ratings" AS CR ON UV."ContentRatingId" = CR."ContentRatingId"
LEFT OUTER JOIN "Sources" AS S ON UV."SourceTypeId" = S."SourceID";

CREATE OR REPLACE VIEW "UniversesWithDetails" AS
SELECT
    UV."UniverseId", UV."UniverseName", UV."UniverseDescription", UV."UniverseOwnerID", UV."CreatedDate", UV."ContentRatingId", UV."SourceTypeId", UV."StatusID", UV."RequiresApprovalOnJoin", UV."DisableLinkify", UV."SubmittedByID",
    S."Source" AS "UniverseSource",
    OwnerUser."Username" AS "UniverseOwnerName",
    Submitter."Username" AS "SubmittedByName",
    CR."ContentRating"
FROM "Universes" AS UV
INNER JOIN "Users" AS OwnerUser ON UV."UniverseOwnerID" = OwnerUser."UserId"
INNER JOIN "Content_Ratings" AS CR ON UV."ContentRatingId" = CR."ContentRatingId"
LEFT OUTER JOIN "Users" AS Submitter ON UV."SubmittedByID" = Submitter."UserId"
LEFT OUTER JOIN "Sources" AS S ON UV."SourceTypeId" = S."SourceID";

CREATE OR REPLACE VIEW "UniversesForUser" AS
SELECT
    U."UniverseId", U."UniverseName", U."UniverseDescription", U."UniverseOwnerID", U."CreatedDate", U."ContentRatingId", U."SourceTypeId", U."StatusID", U."RequiresApprovalOnJoin", U."DisableLinkify",
    USR."Username" AS "OwnerUsername",
    (SELECT COUNT("CharacterId") FROM "Character_Universes" WHERE "UniverseId" = U."UniverseId") AS "CharacterCount",
    (SELECT COUNT("AdminID") FROM "Universe_Admins" WHERE "UniverseId" = U."UniverseId") AS "AdminCount"
FROM "Universes" AS U
INNER JOIN "Users" AS USR ON U."UniverseOwnerID" = USR."UserId";

CREATE OR REPLACE VIEW "UserNotesWithDetails" AS
SELECT
    UN."UserNoteID", UN."UserId", TargetUser."Username" AS "TargetUsername", UN."CreatedByUserId", Author."Username" AS "AuthorUsername", Author."Username" AS "CreatedByUserName", UN."NoteContent", UN."NoteTimestamp"
FROM "User_Notes" AS UN
INNER JOIN "Users" AS TargetUser ON UN."UserId" = TargetUser."UserId"
INNER JOIN "Users" AS Author ON UN."CreatedByUserId" = Author."UserId";

CREATE OR REPLACE VIEW "vw_QuickLinks" AS
SELECT "QuickLinkId", "UserId", "LinkName", "LinkAddress", "OrderNumber", "OrderNumber" AS "SortOrder"
FROM "QuickLinks";

CREATE OR REPLACE VIEW "ProposalsWithDetails" AS
SELECT
    P."ProposalID",
    P."UserId",
    P."Title",
    P."Description",
    P."ContentRatingId",
    P."StatusID",
    P."CreatedDateTime",
    P."LastUpdated",
    P."UniverseId",
    P."IsPrivate",
    P."DisableLinkify",
    U."Username",
    CR."ContentRating",
    PS."StatusName"
FROM "Proposals" AS P
INNER JOIN "Users" AS U ON P."UserId" = U."UserId"
INNER JOIN "Content_Ratings" AS CR ON P."ContentRatingId" = CR."ContentRatingId"
INNER JOIN "Proposal_Statuses" AS PS ON P."StatusID" = PS."StatusID";


-- ====================================================================
--  SECTION 5: STORED PROCEDURES (as Functions/Procedures in PG)
-- ====================================================================

CREATE OR REPLACE PROCEDURE "AwardNewBadgeIfNotAwarded"(
    p_badge_id INT,
    p_user_id INT
)
LANGUAGE plpgsql
AS $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM "User_Badges" WHERE "UserId" = p_user_id AND "BadgeID" = p_badge_id) THEN
        INSERT INTO "User_Badges" ("UserId", "BadgeID")
        VALUES (p_user_id, p_badge_id);
    END IF;
END;
$$;

CREATE OR REPLACE PROCEDURE "AddThreadMessage"(
    p_thread_id INT,
    p_creator_character_id INT,
    p_message_content TEXT
)
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO "Thread_Messages" ("ThreadID", "CreatorID", "MessageContent", "TimeStamp")
    VALUES (p_thread_id, p_creator_character_id, p_message_content, NOW());

    UPDATE "Threads"
    SET "LastMessage" = NOW()
    WHERE "ThreadID" = p_thread_id;
END;
$$;

CREATE OR REPLACE FUNCTION "GetUserThreads"(p_user_id INT)
RETURNS TABLE(
    "ThreadID" INT,
    "ThreadName" VARCHAR(255),
    "LastMessageDate" TIMESTAMP,
    "LastMessage" TEXT,
    "Opponent" TEXT,
    "ReadStatusID" INT
)
LANGUAGE sql
AS $$
    SELECT
        T."ThreadID",
        T."ThreadTitle" AS "ThreadName",
        COALESCE(T."LastMessage", T."DateCreated") AS "LastMessageDate",
        (SELECT "MessageContent" FROM "Thread_Messages" WHERE "ThreadID" = T."ThreadID" ORDER BY "TimeStamp" DESC LIMIT 1) AS "LastMessage",
        (SELECT string_agg(C."CharacterDisplayName", ', ')
           FROM "Thread_Users" TU_Inner
           JOIN "Characters" C ON TU_Inner."CharacterId" = C."CharacterId"
           WHERE TU_Inner."ThreadID" = T."ThreadID" AND C."UserId" != p_user_id) AS "Opponent",
        TU."ReadStatusID"
    FROM "Threads" AS T
    INNER JOIN "Thread_Users" AS TU ON T."ThreadID" = TU."ThreadID"
    WHERE TU."UserId" = p_user_id
    ORDER BY "LastMessageDate" DESC;
$$;

CREATE OR REPLACE FUNCTION "GetPublicThreads"()
RETURNS TABLE(
    "ThreadID" INT,
    "ThreadName" VARCHAR(255),
    "LastPostDate" TIMESTAMP,
    "Username" VARCHAR(255),
    "PostCount" BIGINT,
    "LastPostBy" VARCHAR(255),
    "LastMessage" TEXT
)
LANGUAGE sql
AS $$
    SELECT
        T."ThreadID",
        T."ThreadTitle" AS "ThreadName",
        COALESCE(T."LastMessage", T."DateCreated") AS "LastPostDate",
        U."Username",
        (SELECT COUNT(*) FROM "Thread_Messages" WHERE "ThreadID" = T."ThreadID") AS "PostCount",
        (SELECT LastPostUser."Username" FROM "Thread_Messages" AS TM
          JOIN "Characters" AS LastPostCharacter ON TM."CreatorID" = LastPostCharacter."CharacterId"
          JOIN "Users" AS LastPostUser ON LastPostCharacter."UserId" = LastPostUser."UserId"
          WHERE TM."ThreadID" = T."ThreadID"
          ORDER BY TM."TimeStamp" DESC LIMIT 1) AS "LastPostBy",
        (SELECT TM."MessageContent" FROM "Thread_Messages" AS TM
          WHERE TM."ThreadID" = T."ThreadID"
          ORDER BY TM."TimeStamp" DESC LIMIT 1) AS "LastMessage"
    FROM "Threads" AS T
    INNER JOIN "Users" AS U ON T."CreatedBy" = U."UserId"
    WHERE T."ForumID" = 1
    ORDER BY "LastPostDate" DESC;
$$;

CREATE OR REPLACE FUNCTION "GetThreadDetails"(p_thread_id INT)
RETURNS TABLE (
    "ThreadID" INT,
    "ThreadTitle" VARCHAR(255),
    "LastUpdateDate" TIMESTAMP,
    "CreatedBy" INT,
    "CreatorUsername" VARCHAR(255)
)
LANGUAGE sql
AS $$
    SELECT
        T."ThreadID",
        T."ThreadTitle",
        COALESCE(T."LastMessage", T."DateCreated") AS "LastUpdateDate",
        T."CreatedBy",
        U."Username" AS "CreatorUsername"
    FROM "Threads" T
    INNER JOIN "Users" U ON T."CreatedBy" = U."UserId"
    WHERE T."ThreadID" = p_thread_id;
$$;

-- Final confirmation message for psql client
\echo 'Database rpgdb-live and all required objects have been created successfully.'