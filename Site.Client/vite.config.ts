import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react-swc'
import path from 'path'
import mkcert from 'vite-plugin-mkcert'

export default defineConfig(({ command }) => {
    return {
        plugins: [react(), mkcert()],
        // CORRECTED: The 'serve' base path must match your YARP proxy path.
        base: command === 'serve' ? '/vite-dev/' : '/react-dist/',
        build: {
            outDir: '../wwwroot/react-dist',
            emptyOutDir: true,
            manifest: 'manifest.json',
            rollupOptions: {
                input: 'src/main.tsx'
            }
        },
        server: {
            port: 5173,
            strictPort: true,
            hmr: false,
            fs: {
                // Disabling the strict file serving restriction as a workaround
                // for persistent 403 errors in the development environment.
                strict: false,
            },
        },
        css: {
            preprocessorOptions: {
                scss: {
                    // CORRECTED: Modern Dart Sass uses 'loadPaths' instead of 'includePaths'.
                    loadPaths: [path.resolve(__dirname, '../Site.Styles/scss')],
                    quietDeps: true,
                },
            },
            // A custom resolver to handle absolute paths generated by SASS.
            // This is necessary because SASS resolves URLs to absolute file paths.
            url: (url: string) => {
                // If the URL is already relative, a data URI, or a web path, leave it as is.
                if (url.startsWith('.') || url.startsWith('data:') || url.startsWith('http')) {
                    return url;
                }
                // If the URL is an absolute path, it needs to be rewritten for the Vite dev server.
                if (path.isAbsolute(url)) {
                    // `/@fs/` is a special Vite prefix that serves files from the local file system.
                    // We need to ensure the path uses forward slashes for URL compatibility.
                    return `/@fs/${url.replace(/\\/g, '/')}`;
                }
                return url;
            }
        },
    }
})
