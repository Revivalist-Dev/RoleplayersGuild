using RoleplayersGuild.Site.Model;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace RoleplayersGuild.Site.Services
{
    public interface IDataService
    {
        #region --- Generic Query & Execute Methods ---
        Task<T> GetScalarAsync<T>(string sql, object? parameters = null);
        Task<T?> GetRecordAsync<T>(string sql, object? parameters = null);
        Task<IEnumerable<T>> GetRecordsAsync<T>(string sql, object? parameters = null);
        Task<int> ExecuteAsync(string sql, object? parameters = null);
        #endregion

        #region --- Business Logic Methods ---

        Task LogErrorAsync(string errorDetails);
        Task<int> CreateNewUserAsync(string emailAddress, string password, string username);
        Task<User?> GetUserAsync(string emailAddress, string password);
        Task<User?> GetUserAsync(int userId);
        Task<User?> GetUserByEmailAsync(string emailAddress);
        Task<int> GetUserIdFromCharacterAsync(int characterId);
        Task<int> GetUserIdByEmailAsync(string emailAddress);
        Task<int> GetUserIdByUsernameAsync(string username);
        Task<int> GetUnreadThreadCountAsync(int userId);
        Task BanUserAsync(int userId);
        Task<int> GetUnreadImageCommentCountAsync(int userId);
        Task<int> GetCurrentSendAsCharacterIdAsync();
        Task SetCurrentSendAsCharacterIdAsync(int characterId);
        Task<int> GetMembershipTypeIdAsync(int userId);
        Task<Character?> GetCharacterAsync(int characterId);
        Task<int> GetCharacterCountAsync(int userId);
        Task<int> CreateNewCharacterAsync(int userId);
        Task DeleteCharacterAsync(int characterId);
        Task UpdateCharacterAsync(CharacterInputModel model);
        Task UpdateCharacterGenresAsync(int characterId, List<int> genreIds);
        Task UpdateCharacterBadgeAssignmentAsync(int characterId, int userBadgeId);
        Task UpdateCharacterBBFrameAsync(int characterId, string bbframeContent);
        Task<int> GetAssignedUserBadgeIdAsync(int characterId);
        Task<IEnumerable<Character>> GetActiveCharactersForUserAsync(int userId);
        Task<Universe?> GetUniverseAsync(int universeId);
        Task<UniverseWithDetails?> GetUniverseWithDetailsAsync(int universeId);
        Task<int> CreateNewUniverseAsync(int userId);
        Task DeleteUniverseAsync(int universeId);
        Task<IEnumerable<UniverseWithDetails>> GetUserUniversesAsync(int userId);
        Task<ChatRoom?> GetChatRoomAsync(int chatRoomId);
        Task<ChatRoomWithDetails?> GetChatRoomWithDetailsAsync(int chatRoomId);
        Task<int> CreateNewChatRoomAsync(int userId);
        Task DeleteChatRoomAsync(int chatRoomId);
        Task<IEnumerable<ChatRoomPostsWithDetails>> GetChatRoomPostsAsync(int chatRoomId, int lastPostId);
        Task AddChatRoomPostAsync(int chatRoomId, int userId, int characterId, string postContent, string? characterThumbnail, string? characterNameClass, string? characterDisplayName);
        Task UpdateChatRoomAsync(ChatRoomInputModel model);
        Task<ArticleWithDetails?> GetArticleWithDetailsAsync(int articleId);
        Task<int> CreateNewArticleAsync(int userId);
        Task DeleteArticleAsync(int articleId);
        Task<IEnumerable<int>> GetArticleGenresAsync(int articleId);
        Task UpdateArticleAsync(int articleId, ArticleInputModel model);
        Task UpdateArticleGenresAsync(int articleId, List<int> genreIds);
        Task<StoryWithDetails?> GetStoryWithDetailsAsync(int storyId);
        Task<int> CreateNewStoryAsync(int userId);
        Task DeleteStoryAsync(int storyId);
        Task<IEnumerable<int>> GetStoryGenresAsync(int storyId);
        Task UpdateStoryAsync(StoryInputModel model);
        Task UpdateStoryGenresAsync(int storyId, List<int> genreIds);
        Task<Proposal?> GetProposalAsync(int proposalId);
        Task<IEnumerable<ProposalStatus>> GetProposalStatusesAsync();
        Task<IEnumerable<int>> GetProposalGenresAsync(int proposalId);
        Task<PagedResult<CharactersForListing>> SearchUserCharactersAsync(int userId, SearchInputModel search, int pageIndex, int pageSize);
        Task<int> CreateProposalAsync(ProposalInputModel model, int userId);
        Task UpdateProposalAsync(ProposalInputModel model, int userId);
        Task UpdateProposalGenresAsync(int proposalId, List<int> genreIds);
        Task DeleteProposalAsync(int proposalId, int userId);
        Task<CharacterImage?> GetImageAsync(int imageId);
        Task<CharacterImage?> GetDisplayImageAsync(int characterId);
        Task AddImageAsync(string imageUrl, int characterId, int userId, bool isPrimary, bool isMature, string imageCaption); Task RemoveDefaultFlagFromImagesAsync(int characterId);
        Task UpdateImageAsync(int imageId, bool isPrimary, bool isMature, string imageCaption);
        Task<CharacterImage?> GetImageWithOwnerAsync(int imageId);
        Task<int> GetAvailableImageSlotCountAsync(int userId, int characterId);
        Task UpdateImageDetailsAsync(int imageId, string caption, bool isPrimary);
        Task DeleteImageRecordAsync(int imageId);
        Task<int> CreateNewThreadAsync(string threadTitle, int creatorUserId);
        Task InsertThreadUserAsync(int userId, int threadId, int readStatusId, int characterId, int permissionId);
        Task InsertMessageAsync(int threadId, int creatorId, string messageContent);
        Task RemoveThreadCharacterAsync(int characterId, int threadId);
        Task RemoveThreadUserAsync(int userId, int threadId);
        Task NukeThreadAsync(int threadId);
        Task MarkUnreadForOthersOnThreadAsync(int threadId, int currentUserId);
        Task MarkReadForCurrentUserAsync(int threadId, int currentUserId);
        Task ChangeReadStatusForCurrentUserAsync(int threadId, int readStatus, int currentUserId);
        Task<ThreadDetails?> GetThreadDetailsForUserAsync(int threadId, int currentUserId);
        Task<int> GetBlockRecordIdAsync(int blockeeUserId, int blockerUserId);
        Task BlockUserAsync(int blockerUserId, int blockeeUserId);
        Task UnblockUserAsync(int blockerUserId, int blockedUserId);
        Task AwardHolidayBadgeAsync(string badgeType, int badgeId, int userId);
        Task AwardBadgeIfNotExistingAsync(int badgeId, int userId);
        Task<IEnumerable<AssignableBadge>> GetAssignableBadgesAsync(int userId, int characterId);
        Task<IEnumerable<UserBadgeViewModel>> GetAvailableBadgesAsync();
        Task<Ad?> GetRandomAdAsync(int adType);
        Task<IEnumerable<Category>> GetCategoriesAsync();
        Task<IEnumerable<ContentRating>> GetContentRatingsAsync();
        Task<IEnumerable<Genre>> GetGenresAsync();
        Task<IEnumerable<Gender>> GetGendersAsync();
        Task<IEnumerable<SexualOrientation>> GetSexualOrientationsAsync();
        Task<IEnumerable<CharacterSource>> GetCharacterSourcesAsync();
        Task<IEnumerable<PostLength>> GetPostLengthsAsync();
        Task<IEnumerable<LiteracyLevel>> GetLiteracyLevelsAsync();
        Task<IEnumerable<LfrpStatus>> GetLfrpStatusesAsync();
        Task<IEnumerable<EroticaPreference>> GetEroticaPreferencesAsync();
        Task<IEnumerable<ArticleForListingViewModel>> GetUserArticlesAsync(int userId);
        Task<ILookup<int, string>> GetGenresForArticleListAsync(IEnumerable<int> articleIds);
        Task<PagedResult<ArticleForListingViewModel>> GetPublicArticlesAsync(int pageIndex, int pageSize);
        Task<DashboardFunding> GetDashboardFundingAsync();
        Task<int> GetOpenAdminItemCountAsync(int userId);
        Task<IEnumerable<DashboardChatRoom>> GetActiveChatRoomsForDashboardAsync(int userId);
        Task<IEnumerable<DashboardStory>> GetPopularStoriesForDashboardAsync(int userId);
        Task<IEnumerable<DashboardArticle>> GetNewestArticlesForDashboardAsync(int userId);
        Task<IEnumerable<DashboardProposal>> GetNewestProposalsForDashboardAsync(int userId);
        Task<IEnumerable<CharactersForListing>> GetCharactersForListingAsync(string screenStatus, int recordCount, int currentUserId);
        Task<CharacterWithDetails?> GetCharacterWithDetailsAsync(int characterId);
        Task<IEnumerable<Genre>> GetCharacterGenresAsync(int characterId);
        Task<bool> IsUserBlockedAsync(int blockedUserId, int blockerUserId);
        Task<PagedResult<CharactersForListing>> SearchCharactersAsync(SearchInputModel search, int currentUserId, int pageIndex, int pageSize);
        Task<IEnumerable<ToDoItemViewModel>> GetDevelopmentItemsAsync();
        Task<IEnumerable<ToDoItemViewModel>> GetConsiderationItemsAsync();
        Task<int> AddToDoItemAsync(string name, string description, int userId);
        Task AddVoteAsync(int itemId, int userId);
        Task RemoveVoteAsync(int itemId, int userId);
        Task<bool> HasUserVotedAsync(int itemId, int userId);
        Task<IEnumerable<ImageCommentViewModel>> GetImageCommentsAsync(int imageId);
        Task AddImageCommentAsync(int imageId, int characterId, string commentText);
        Task DeleteImageCommentAsync(int commentId, int userId);
        Task<PagedResult<CharacterImage>> GetCharacterImagesAsync(int characterId, int pageIndex, int pageSize);
        Task<CharacterImageWithDetails?> GetImageDetailsAsync(int imageId);
        Task<Character?> GetCharacterForEditAsync(int characterId, int userId);
        Task UpdateCharacterCustomProfileAsync(int characterId, string? css, string? html, bool isEnabled);
        Task<IEnumerable<CharacterImage>> GetCharacterImagesForGalleryAsync(int characterId);
        Task<IEnumerable<ProposalWithDetails>> GetUserProposalsAsync(int userId);
        Task<IEnumerable<QuickLink>> GetUserQuickLinksAsync(int userId);
        Task AddQuickLinkAsync(QuickLink newLink);
        Task DeleteQuickLinkAsync(int quickLinkId, int userId);
        Task UpdateUserSettingsAsync(int userId, SettingsInputModel settings);
        Task<bool> IsUsernameTakenAsync(string username, int currentUserId);
        Task<StoryPost?> GetStoryPostForEditAsync(int storyPostId, int userId);
        Task UpdateStoryPostAsync(int storyPostId, int characterId, string content);
        Task<IEnumerable<StoryWithDetails>> GetUserStoriesAsync(int userId);
        Task<IEnumerable<ThreadDetails>> GetUserThreadsAsync(int userId, string filter);
        Task<IEnumerable<ThreadMessageViewModel>> GetThreadMessagesAsync(int threadId);
        Task<IEnumerable<ThreadParticipantViewModel>> GetThreadParticipantsAsync(int threadId);
        Task<Universe?> GetUniverseForEditAsync(int universeId, int userId);
        Task UpdateUniverseAsync(UniverseInputModel model, int userId);
        Task UpdateUniverseGenresAsync(int universeId, List<int> genreIds);
        Task<IEnumerable<int>> GetUniverseGenresAsync(int universeId);
        Task UpdateUserAboutMeAsync(int userId, string aboutMe);
        Task<ILookup<int, string>> GetGenresForStoryListAsync(IEnumerable<int> storyIds);
        Task<PagedResult<StoryPostViewModel>> GetStoryPostsPagedAsync(int storyId, int pageIndex, int pageSize);
        Task AddStoryPostAsync(int storyId, int characterId, string content);
        Task DeleteStoryPostAsync(int storyPostId, int currentUserId, int storyOwnerId);
        Task<PagedResult<UniverseWithDetails>> SearchUniversesAsync(int pageIndex, int pageSize, string? searchTerm, List<int> genreIds, int currentUserId);
        Task<IEnumerable<ArticleForListingViewModel>> GetUniverseArticlesByCategoryAsync(int universeId, int categoryId);
        Task<IEnumerable<Character>> GetUserCharactersNotInUniverseAsync(int userId, int universeId);
        Task<IEnumerable<Character>> GetUserCharactersInUniverseAsync(int userId, int universeId);
        Task AddCharactersToUniverseAsync(int universeId, List<int> characterIds);
        Task RemoveCharactersFromUniverseAsync(int universeId, List<int> characterIds);
        Task UnsubscribeUserFromNotificationsAsync(int userId);
        Task<IEnumerable<UserBadgeViewModel>> GetUserBadgesAsync(int userId);
        Task<IEnumerable<ArticleForListingViewModel>> GetUserPublicArticlesAsync(int userId);
        Task<IEnumerable<CharactersForListing>> GetUserPublicCharactersAsync(int userId);
        Task<int> UpsertArticleAsync(ArticleInputModel input, int userId);
        Task<int> UpsertProposalAsync(ProposalInputModel input, int userId);
        Task<int> UpsertStoryAsync(StoryInputModel input, int userId);
        Task<PagedResult<ProposalWithDetails>> SearchProposalsAsync(int pageIndex, int pageSize, List<int> genreIds);
        Task<PagedResult<StoryForListingViewModel>> SearchStoriesAsync(int pageIndex, int pageSize, string? searchTerm, List<int> genreIds, bool includeAdult, int? universeId, int currentUserId);
        Task<PagedResult<ArticleViewModel>> SearchArticlesAsync(int pageIndex, int pageSize, string? searchTerm, List<int> genreIds);
        Task<PagedResult<User>> SearchUsersAsync(string? username, int pageIndex, int pageSize, int currentUserId);
        Task<PagedResult<ChatRoomWithDetails>> SearchChatRoomsAsync(int pageIndex, int pageSize, string? searchTerm, List<int> genreIds);
        Task<IEnumerable<BadgeSelectionViewModel>> GetUserBadgesForEditingAsync(int userId);
        Task UpdateUserBadgeDisplayAsync(int userId, List<int> displayedUserBadgeIds);
        Task<IEnumerable<CharactersForListing>> GetUserCharactersForListingAsync(int userId);
        Task<IEnumerable<(int CharacterId, int UserId)>> GetCharacterAndUserIdsByDisplayNamesAsync(IEnumerable<string> displayNames);
        Task<IEnumerable<DashboardItemViewModel>> GetDashboardItemsAsync(string itemType, string filter, int userId);
        Task<IEnumerable<DashboardChatRoom>> GetDashboardChatRoomsAsync(int userId);
        Task<IEnumerable<ChatParticipantViewModel>> GetChatRoomParticipantsAsync(int chatRoomId);
        Task UpsertCharacterAvatarAsync(int characterId, string avatarUrl);
        Task<int> AddInlineImageAsync(string imageUrl, int characterId, int userId, string inlineName);
        Task<CharacterInline?> GetInlineImageAsync(int inlineId);
        Task DeleteInlineImageRecordAsync(int inlineId);
        #endregion
    }
}